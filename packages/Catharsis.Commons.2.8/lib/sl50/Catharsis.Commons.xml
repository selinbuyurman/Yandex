<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catharsis.Commons</name>
    </assembly>
    <members>
        <member name="T:Catharsis.Commons.FieldInfoExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Reflection.FieldInfo"/>.</para>
            </summary>
            <seealso cref="T:System.Reflection.FieldInfo"/>
        </member>
        <member name="M:Catharsis.Commons.FieldInfoExtensions.IsProtected(System.Reflection.FieldInfo)">
            <summary>
              <para>Determines whether specified class field has a <c>protected</c> access level.</para>
            </summary>
            <param name="self">Class field to inspect.</param>
            <returns><c>true</c> if <paramref name="self"/> is having a <c>protected</c> access level, <c>false</c> otherwise (public/private).</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.EnumExtensions">
            <summary>
              <para>Set of extension methods for <see cref="T:System.Enum"/> structure.</para>
            </summary>
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="M:Catharsis.Commons.EnumExtensions.Description(System.Enum)">
            <summary>
              <para>Returns a value of <see cref="T:System.ComponentModel.DescriptionAttribute"/> for a given enumeration element.</para>
            </summary>
            <param name="self">Enumeration option/element with a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on it.</param>
            <returns>Description for a given <paramref name="self"/>, which is a value of <see cref="T:System.ComponentModel.DescriptionAttribute"/>. If there is no attribute on that enumeration member, a <c>null</c> is returned.</returns>
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>
            <seealso cref="M:Catharsis.Commons.EnumExtensions.Descriptions``1"/>
        </member>
        <member name="M:Catharsis.Commons.EnumExtensions.Descriptions``1">
            <summary>
              <para>Returns a collection of values of <see cref="T:System.ComponentModel.DescriptionAttribute"/> for a given enumeraton type.</para>
            </summary>
            <typeparam name="T">Type of enumeration.</typeparam>
            <returns>Collection of descriptions for a given enumeration of type <typeparamref name="T"/>.</returns>
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>
            <seealso cref="M:Catharsis.Commons.EnumExtensions.Description(System.Enum)"/>
        </member>
        <member name="T:Catharsis.Commons.ArrayExtensions">
            <summary>
              <para>Set of extension methods for arrays.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.Base64(System.Byte[])">
            <summary>
              <para>Returns BASE64-encoded representation of a bytes sequence.</para>
            </summary>
            <param name="self">Bytes to convert to BASE64 encoding.</param>
            <returns>BASE64 string representation of <paramref name="self"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Convert.ToBase64String(System.Byte[])"/>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.Bytes(System.Char[],System.Text.Encoding)">
            <summary>
              <para>Converts array of characters into array of bytes, using specified encoding.</para>
            </summary>
            <param name="self">Source array of characters.</param>
            <param name="encoding">Encoding to be used for transforming between <see cref="T:System.Char"/> at its <see cref="T:System.Byte"/> equivalent. If not specified, uses <see cref="P:System.Text.Encoding.UTF8"/> encoding.</param>
            <returns>Array of bytes which represents <paramref name="self"/> array in <paramref name="encoding"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Text.Encoding.GetBytes(System.Char[])"/>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.Hex(System.Byte[])">
            <summary>
              <para>Converts array of bytes into HEX-encoded string.</para>
            </summary>
            <param name="self">Bytes to convert to HEX string.</param>
            <returns>HEX string representation of <paramref name="self"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.BitConverter.ToString(System.Byte[])"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.Hex(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.Join``1(``0[],``0[])">
            <summary>
              <para>Concatenates contents of two arrays, producing a new one.</para>
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="self">First (left-side) array.</param>
            <param name="other">Second (right-side) array.</param>
            <returns>Results array which contains all elements from <paramref name="self"/> array, immediately followed by all elements from <paramref name="second"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="other"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Array.Copy(System.Array,System.Array,System.Int32)"/>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.String(System.Char[])">
            <summary>
              <para>Returns string representation of specified array of characters.</para>
            </summary>
            <param name="self">Source array of characters.</param>
            <returns>String which is formed from contents of <paramref name="self"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ArrayExtensions.String(System.Byte[],System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.ArrayExtensions.String(System.Byte[],System.Text.Encoding)">
            <summary>
              <para>Converts array of bytes into a string, using specified encoding.</para>
            </summary>
            <param name="self">Source array of bytes.</param>
            <param name="encoding">Encoding to be used for transforming between <see cref="T:System.Byte"/> at its <see cref="T:System.Char"/> equivalent. If not specified, uses <see cref="P:System.Text.Encoding.UTF8"/> encoding.</param>
            <returns>Array of characters as a string which represents <paramref name="self"/> array in <paramref name="encoding"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ArrayExtensions.String(System.Char[])"/>
            <seealso cref="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="T:Catharsis.Commons.StringXmlExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.String"/>.</para>
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Catharsis.Commons.StringXmlExtensions.AsXml``1(System.String,System.Type[])">
            <summary>
              <para>Deserializes XML string text into object of specified type.</para>
            </summary>
            <typeparam name="T">Type of object which is to be the result of deserialization process.</typeparam>
            <param name="self">XML data for deserialization.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for deserialization purposes.</param>
            <returns>Deserialized XML contents of <paramref name="self"/> string as the object (or objects graph with a root element) of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
        </member>
        <member name="T:Catharsis.Commons.StreamExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.AsXDocument(System.IO.Stream,System.Boolean)">
            <summary>
              <para>Deserializes XML data from source <see cref="T:System.IO.Stream"/> as <see cref="T:System.Xml.Linq.XDocument"/> object.</para>
            </summary>
            <param name="self">Source stream with XML data.</param>
            <param name="close">Whether to automatically close source stream after successfull deserialization.</param>
            <returns><see cref="T:System.Xml.Linq.XDocument"/> document, constructed from data in <paramref name="self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Linq.XDocument"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.BinaryReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.BinaryReader(System.IO.Stream,System.Text.Encoding)"/> for reading data from specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Source stream to read from.</param>
            <param name="encoding">Text encoding to use by <see cref="M:Catharsis.Commons.StreamExtensions.BinaryReader(System.IO.Stream,System.Text.Encoding)"/>. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Binary reader instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.BinaryReader(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.BinaryWriter(System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.BinaryWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.BinaryWriter(System.IO.Stream,System.Text.Encoding)"/> for writing data to specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Target stream to write to.</param>
            <param name="encoding">Text encoding to use by <see cref="M:Catharsis.Commons.StreamExtensions.BinaryWriter(System.IO.Stream,System.Text.Encoding)"/>. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Binary writer instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.BinaryWriter(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.BinaryReader(System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Bytes(System.IO.Stream,System.Boolean)">
            <summary>
              <para>Read the content of this <see cref="T:System.IO.Stream"/> and return it as a <see cref="T:System.Byte"/> array. The input is closed before this method returns.</para>
            </summary>
            <param name="self"></param>
            <param name="close"></param>
            <returns>The <see cref="T:System.Byte"/> array from that <paramref name="self"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Rewind``1(``0)">
            <summary>
              <para>Sets the position within source <see cref="T:System.IO.Stream"/> to the beginning of a stream, if this stream supports seeking operations.</para>
            </summary>
            <typeparam name="T">Type of source stream.</typeparam>
            <param name="self">Source stream.</param>
            <returns>Back reference to <paramref name="self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Text(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
              <para>Returns all available text data from a source stream.</para>
            </summary>
            <param name="self">Source stream to read from.</param>
            <param name="close">Whether to automatically close source stream when all available data has been successfully read from it.</param>
            <param name="encoding">Encoding to be used for bytes-to-text conversion. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Text data from a <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.TextReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.TextReader(System.IO.Stream,System.Text.Encoding)"/> for reading text data from specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Source stream to read from.</param>
            <param name="encoding">Text encoding to use by <see cref="M:Catharsis.Commons.StreamExtensions.TextReader(System.IO.Stream,System.Text.Encoding)"/>. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Text reader instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.TextReader(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.TextWriter(System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.TextWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.TextWriter(System.IO.Stream,System.Text.Encoding)"/> for writing text data to specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Target stream to write to.</param>
            <param name="encoding">Text encoding to use by <see cref="M:Catharsis.Commons.StreamExtensions.TextWriter(System.IO.Stream,System.Text.Encoding)"/>. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Text writer instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.TextWriter(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.TextReader(System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.Byte[])">
            <summary>
              <para>Writes binary data to target stream.</para>
            </summary>
            <typeparam name="T">Type of target stream.</typeparam>
            <param name="self">Target stream to write to.</param>
            <param name="bytes">Binary data to write to a stream.</param>
            <returns>Back reference to <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="bytes"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.IO.Stream)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.IO.Stream)">
            <summary>
              <para>"Pipes" two streams by writing all available data from one to another.</para>
            </summary>
            <typeparam name="T">Type of target stream.</typeparam>
            <param name="self">Target stream to write data to.</param>
            <param name="from">Source stream to read data from.</param>
            <returns>Back reference to target stream.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="from"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.Byte[])"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.String,System.Text.Encoding)">
            <summary>
              <para>Writes text data to target <see cref="T:System.IO.Stream"/>, using specified <see cref="T:System.Text.Encoding"/>.</para>
            </summary>
            <typeparam name="T">Type of target stream.</typeparam>
            <param name="self">Target stream to write to.</param>
            <param name="text">Text to write to a stream.</param>
            <param name="encoding">Encoding to be used for text-to-bytes conversion. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>Back reference to <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="text"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.Byte[])"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.Write``1(``0,System.IO.Stream)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.XmlReader(System.IO.Stream,System.Boolean)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.XmlReader(System.IO.Stream,System.Boolean)"/> for reading XML data from specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Source stream to read from.</param>
            <param name="close">Whether resulting <see cref="T:System.Xml.XmlReader"/> should close underlying stream when its <see cref="M:System.Xml.XmlReader.Close"/> method will be called.</param>
            <returns>XML reader instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.XmlReader(System.IO.Stream,System.Boolean)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.XmlWriter(System.IO.Stream,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.StreamExtensions.XmlWriter(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
              <para>Returns a <see cref="M:Catharsis.Commons.StreamExtensions.XmlWriter(System.IO.Stream,System.Boolean,System.Text.Encoding)"/> for writing XML data to specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <param name="self">Target stream to write to.</param>
            <param name="close">Whether resulting <see cref="T:System.Xml.XmlWriter"/> should close underlying stream when its <see cref="M:System.Xml.XmlWriter.Close"/> method will be called.</param>
            <param name="encoding">Text encoding to use by <see cref="M:Catharsis.Commons.StreamExtensions.XmlWriter(System.IO.Stream,System.Boolean,System.Text.Encoding)"/>. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> will be used.</param>
            <returns>XML writer instance that wraps <see cref="!:self"/> stream.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.XmlWriter(System.IO.Stream,System.Boolean,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.StreamExtensions.XmlReader(System.IO.Stream,System.Boolean)"/>
        </member>
        <member name="T:Catharsis.Commons.MethodInfoExtensions">
            <summary>
              <para>Tests set for class <see cref="T:System.Reflection.MethodInfo"/>.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.MethodInfoExtensions.Delegate(System.Reflection.MethodInfo,System.Type)">
            <summary>
              <para>Creates a delegate of the specified type to represent a specified static method.</para>
            </summary>
            <param name="self">The <see cref="T:System.Reflection.MethodInfo"/> describing the static or instance method the delegate is to represent.</param>
            <param name="type">The <see cref="T:System.Type"/> of delegate to create.</param>
            <returns>A delegate of the specified type to represent the specified static method.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="type"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)"/>
            <seealso cref="M:Catharsis.Commons.MethodInfoExtensions.Delegate``1(System.Reflection.MethodInfo)"/>
        </member>
        <member name="M:Catharsis.Commons.MethodInfoExtensions.Delegate``1(System.Reflection.MethodInfo)">
            <summary>
              <para>Creates a delegate of the specified type to represent a specified static method.</para>
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of delegate to create.</typeparam>
            <param name="self">The <see cref="T:System.Reflection.MethodInfo"/> describing the static or instance method the delegate is to represent.</param>
            <returns>A delegate of the specified type to represent the specified static method.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)"/>
            <seealso cref="M:Catharsis.Commons.MethodInfoExtensions.Delegate(System.Reflection.MethodInfo,System.Type)"/>
        </member>
        <member name="T:Catharsis.Commons.BooleanExtensions">
            <summary>
              <para>Set of extension methods for type <see cref="T:System.Boolean"/>.</para>
            </summary>
            <seealso cref="T:System.Boolean"/>
        </member>
        <member name="M:Catharsis.Commons.BooleanExtensions.And(System.Boolean,System.Boolean)">
            <summary>
              <para>Performs a logical AND operation between current <see cref="T:System.Boolean"/> value and another.</para>
            </summary>
            <param name="self">Current <see cref="T:System.Boolean"/> value ("left").</param>
            <param name="other">Second <see cref="T:System.Boolean"/> value ("right").</param>
            <returns>Result of logical operation.</returns>
        </member>
        <member name="M:Catharsis.Commons.BooleanExtensions.Not(System.Boolean)">
            <summary>
              <para>Performs a logical NOT operation with current <see cref="T:System.Boolean"/> value.</para>
            </summary>
            <param name="self">Current <see cref="T:System.Boolean"/> value.</param>
            <returns>Result of logical operation.</returns>
        </member>
        <member name="M:Catharsis.Commons.BooleanExtensions.Or(System.Boolean,System.Boolean)">
            <summary>
              <para>Performs a logical OR operation between current <see cref="T:System.Boolean"/> value and another.</para>
            </summary>
            <param name="self">Current <see cref="T:System.Boolean"/> value ("left").</param>
            <param name="other">Second <see cref="T:System.Boolean"/> value ("right").</param>
            <returns>Result of logical operation.</returns>
        </member>
        <member name="M:Catharsis.Commons.BooleanExtensions.Xor(System.Boolean,System.Boolean)">
            <summary>
              <para>Performs a logical XOR (Exclusive OR) operation between current <see cref="T:System.Boolean"/> value and another.</para>
            </summary>
            <param name="self">Current <see cref="T:System.Boolean"/> value ("left").</param>
            <param name="other">Second <see cref="T:System.Boolean"/> value ("right").</param>
            <returns>Result of logical operation.</returns>
        </member>
        <member name="T:Catharsis.Commons.XmlReaderSerializationExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <seealso cref="T:System.Xml.XmlReader"/>
        </member>
        <member name="M:Catharsis.Commons.XmlReaderSerializationExtensions.Deserialize(System.Xml.XmlReader,System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
              <para>Deserializes XML data from <see cref="T:System.Xml.XmlReader"/> into object of specified type.</para>
            </summary>
            <param name="self"><see cref="T:System.Xml.XmlReader"/> used for retrieving XML data for deserialization.</param>
            <param name="type">Type of object which is to be the result of deserialization process.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for deserialization purposes.</param>
            <param name="close">Whether to automatically close <paramref name="self"/> after deserialization process or leave it intact.</param>
            <returns>Deserialized XML contents from a <paramref name="self"/> as the object (or objects graph with a root element) of <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="type"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.XmlReaderSerializationExtensions.Deserialize``1(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.XmlReaderSerializationExtensions.Deserialize``1(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
              <para>Deserializes XML data from <see cref="T:System.Xml.XmlReader"/> into object of specified type.</para>
            </summary>
            <typeparam name="T">Type of object which is to be the result of deserialization process.</typeparam>
            <param name="self"><see cref="T:System.Xml.XmlReader"/> used for retrieving XML data for deserialization.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for deserialization purposes.</param>
            <param name="close">Whether to automatically close <paramref name="self"/> after deserialization process or leave it intact.</param>
            <returns>Deserialized XML contents from a <paramref name="self"/> as the object (or objects graph with a root element) of <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.XmlReaderSerializationExtensions.Deserialize(System.Xml.XmlReader,System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)"/>
        </member>
        <member name="T:Catharsis.Commons.XElementExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Xml.Linq.XElement"/>.</para>
            </summary>
            <seealso cref="T:System.Xml.Linq.XElement"/>
        </member>
        <member name="M:Catharsis.Commons.XElementExtensions.Dictionary(System.Xml.Linq.XElement)">
            <summary>
              <para>Translates specified <see cref="T:System.Xml.Linq.XElement"/> into a dictionary.</para>
              <para>Attributes in XML document are translated to string keys and values, nodes become dictionaries with string keys themselves.</para>
            </summary>
            <param name="self"><see cref="T:System.Xml.Linq.XElement"/>, whose structure is to be converted to <see cref="!:IDictionary&lt;string, object&gt;"/> instance.</param>
            <returns>Dictionary that follows the structure of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.XDocumentExtensions.Dictionary(System.Xml.Linq.XDocument)"/>
        </member>
        <member name="T:Catharsis.Commons.TextReaderXmlExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.IO.TextReader"/>.</para>
            </summary>
            <seealso cref="T:System.IO.TextReader"/>
        </member>
        <member name="M:Catharsis.Commons.TextReaderXmlExtensions.AsXml``1(System.IO.TextReader,System.Boolean,System.Type[])">
            <summary>
              <para>Deserializes XML contents from <see cref="T:System.IO.TextReader"/> into object of specified type.</para>
            </summary>
            <typeparam name="T">Type of object which is to be the result of deserialization process.</typeparam>
            <param name="self"><see cref="T:System.IO.TextReader"/> which is used as a source for XML data.</param>
            <param name="close">Whether to automatically close <paramref name="self"/> after deserialization process or leave it intact.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for deserialization purposes.</param>
            <returns>Deserialized XML contents of source <paramref name="self"/> as the object (or objects graph with a root element) of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.StringExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.String"/>.</para>
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Base64(System.String)">
            <summary>
              <para>Converts a BASE64-encoded string to an equivalent 8-bit unsigned integer array.</para>
            </summary>
            <param name="self">BASE64-encoded string to be converted to binary form.</param>
            <returns>An array of 8-bit unsigned integers that is equivalent to <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Convert.FromBase64String(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Bytes(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
              <para>Converts string to an array of bytes, using specified <see cref="T:System.Text.Encoding"/>.</para>
            </summary>
            <param name="self">String that consists of characters that are to be transformed to bytes.</param>
            <param name="encoding">Encoding to be used for transformation between characters of <paramref name="self"/> and their bytes equivalents. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> is used.</param>
            <param name="preamble">Whether to append byte preamble of <paramref name="encoding"/> to the beginning of the resulting byte array.</param>
            <returns>Array of bytes that form <paramref name="self"/> string in given <paramref name="encoding"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Text.Encoding.GetBytes(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.CompareTo(System.String,System.String,System.StringComparison)">
            <summary>
              <para>Compares two specified strings and returns an integer that indicates their relative position in the sort order.</para>
            </summary>
            <param name="self">The current string to compare with the second.</param>
            <param name="other">The second string to compare with the current.</param>
            <param name="options">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>Integer value that indicates the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.String.Compare(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.CompareTo(System.String,System.String,System.Globalization.CompareOptions,System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.CompareTo(System.String,System.String,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
              <para>Compares two specified strings and returns an integer that indicates their relative position in the sort order.</para>
            </summary>
            <param name="self">The current string to compare with the second.</param>
            <param name="other">The second string to compare with the current.</param>
            <param name="options">Options to use when performing the comparison (such as ignoring case or symbols).</param>
            <param name="culture">The culture that supplies culture-specific comparison information.</param>
            <returns>Integer value that indicates the lexical relationship between the two comparands.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.CompareTo(System.String,System.String,System.StringComparison)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Drop(System.String,System.Int32)">
            <summary>
              <para>Removes specified number of characters from the beginning of a string.</para>
            </summary>
            <param name="self">String to be altered.</param>
            <param name="count">Number of characters to drop.</param>
            <returns>Resulting string with removed characters.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
              <para>Replaces each format item in a string with the text equivalent of a corresponding object's value, using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> to perform string conversion of objects.</para>
            </summary>
            <param name="self">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of <paramref name="self"/> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.String.Format(System.String,System.Object[])"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.FormatSelf(System.String,System.Object[])">
            <summary>
              <para>Replaces each format item in a string with the text equivalent of a corresponding object's value.</para>
            </summary>
            <param name="self">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of <paramref name="self"/> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.String.Format(System.String,System.Object[])"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Hex(System.String)">
            <summary>
              <para>Converts HEX-encoded string into array of bytes.</para>
            </summary>
            <param name="self">HEX-encoded string to be converted to byte array.</param>
            <returns>Decoded data from HEX-encoded <paramref name="self"/> string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ArrayExtensions.Hex(System.Byte[])"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsBoolean(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.Boolean"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.Boolean"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsDateTime(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.DateTime"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.DateTime"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsDouble(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.Double"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.Double"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsEmpty(System.String)">
            <summary>
              <para>Determines where a string is either <c>null</c> reference or is <see cref="F:System.String.Empty"/>.</para>
            </summary>
            <param name="self">String to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> is either a <c>null</c> reference or an empty string.</returns>
            <seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsGuid(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.Guid"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.Guid"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsInteger(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid integer value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of integer type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsIpAddress(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.Net.IPAddress"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.Net.IPAddress"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsMatch(System.String,System.String,System.Nullable{System.Text.RegularExpressions.RegexOptions})">
            <summary>
              <para>Determines whether a string matches specified regular expression.</para>
            </summary>
            <param name="self">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
            <returns><c>true</c> if <paramref name="self"/> matches <paramref name="pattern"/> regular expression, <c>false</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="pattern"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.IsUri(System.String)">
            <summary>
              <para>Determines whether a source string represents a valid <see cref="T:System.Uri"/> value.</para>
            </summary>
            <param name="self">Source string to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> represents a valid value of <see cref="T:System.Uri"/> type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Lines(System.String)">
            <summary>
              <para>Splits given string on a newline (<see cref="P:System.Environment.NewLine"/>) character into array of strings.</para>
              <para>If source string is <see cref="F:System.String.Empty"/>, empty array is returned.</para>
            </summary>
            <param name="self">Source string to be splitted.</param>
            <returns>Target array of strings, which are part of <paramref name="self"/> string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Matches(System.String,System.String,System.Nullable{System.Text.RegularExpressions.RegexOptions})">
            <summary>
              <para>Searches source input string for all occurrences of a specified regular expression, using the specified matching options.</para>
            </summary>
            <param name="self">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
            <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="pattern"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Multiply(System.String,System.Int32)">
            <summary>
              <para>Multiplies/repeats value of source string given number of times, returning resulting string.</para>
            </summary>
            <param name="self">String to repeat.</param>
            <param name="count">Number of repeatings.</param>
            <returns>Resulting string, consisting of <paramref name="self"/>'s data that has been repeated <paramref name="count"/> times.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Prepend(System.String,System.String)">
            <summary>
              <para>Prepends specified string to the target one, concatenating both of them.</para>
            </summary>
            <param name="self">Source string.</param>
            <param name="other">String to prepend.</param>
            <returns>Concatenated result of <paramref name="other"/> and <paramref name="self"/> string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
              <para>Replaces all occurrences of different substrings with specified new values.</para>
            </summary>
            <param name="self">Source string where replacements are to be made.</param>
            <param name="replacements">Collection of replacements, where key represents a substring to be replaced and value represents a new value for former substring.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="replacements"/> is a <c>null</c> reference.</exception>
            <returns>New string with performed replacements.</returns>
            <seealso cref="M:Catharsis.Commons.StringExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              <para>Replaces all occurrences of different substrings with specified new values.</para>
            </summary>
            <param name="self">Source string where replacements are to be made.</param>
            <param name="from">Collection of substrings that should be replaced in source string. It must have the same number of elements as in <paramref name="to"/> sequence.</param>
            <param name="to">Collection of new replacement values. It must have the same number of elements as in <paramref name="from"/> sequence.</param>
            <returns>New string with performed replacements.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/>, <paramref name="from"/> or <paramref name="to"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <seealso cref="M:Catharsis.Commons.StringExtensions.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.SwapCase(System.String,System.Globalization.CultureInfo)">
            <summary>
              <para>Alters case of all characters inside a string, using provided culture.</para>
              <para>Upper-case characters are converted to lower-case and vice versa.</para>
            </summary>
            <param name="self">Source string to be converted.</param>
            <param name="culture">Culture to use for case conversion, or a <c>null</c> reference to use <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</param>
            <returns>Result string with swapped case of characters from <paramref name="self"/> string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToBoolean(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Boolean"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns><c>true</c> if <paramref name="self"/> is equivalent to <see cref="F:System.Boolean.TrueString"/>, <c>false otherwise</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Boolean.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToBoolean(System.String,System.Boolean@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToBoolean(System.String,System.Boolean@)">
            <summary>
             <para>Converts specified string into <see cref="T:System.Boolean"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result"><c>true</c> if <paramref name="self"/> is equivalent to <see cref="F:System.Boolean.TrueString"/>, <c>false otherwise</c>.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Boolean.TryParse(System.String,System.Boolean@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToBoolean(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToByte(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Byte"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Byte"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Byte.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToByte(System.String,System.Byte@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToByte(System.String,System.Byte@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Boolean"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Byte"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Byte.TryParse(System.String,System.Byte@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToByte(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDateTime(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.DateTime"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.DateTime"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.DateTime.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDateTime(System.String,System.DateTime@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDateTime(System.String,System.DateTime@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.DateTime"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.DateTime"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.DateTime.TryParse(System.String,System.DateTime@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDateTime(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDecimal(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Decimal"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Decimal"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Decimal.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDecimal(System.String,System.Decimal@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDecimal(System.String,System.Decimal@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Decimal"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Decimal"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Decimal.TryParse(System.String,System.Decimal@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDecimal(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDouble(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Double"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Double"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDouble(System.String,System.Double@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToDouble(System.String,System.Double@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Double"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Double"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToDouble(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToEnum``1(System.String)">
            <summary>
              <para>Converts specified string into enumeration of specified type.</para>
            </summary>
            <typeparam name="T">Type of enumeration.</typeparam>
            <param name="self">String to be converted.</param>
            <returns>Element of enumeration of <typeparamref name="T"/> type, to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToGuid(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Guid"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Guid"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToGuid(System.String,System.Guid@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToGuid(System.String,System.Guid@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Guid"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Guid"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToGuid(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt16(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int16"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Int16"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Int16.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt16(System.String,System.Int16@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt16(System.String,System.Int16@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int16"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Int16"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Int16.TryParse(System.String,System.Int16@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt16(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt32(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int32"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Int32"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Int32.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt32(System.String,System.Int32@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt32(System.String,System.Int32@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int32"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Int32"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt32(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt64(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int64"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Int64"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Int64.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt64(System.String,System.Int64@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToInt64(System.String,System.Int64@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Int64"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Int64"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Int64.TryParse(System.String,System.Int64@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToInt64(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToIpAddress(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Net.IPAddress"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Net.IPAddress"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Net.IPAddress.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToIpAddress(System.String,System.Net.IPAddress@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToIpAddress(System.String,System.Net.IPAddress@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Net.IPAddress"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Net.IPAddress"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToIpAddress(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Tokenize(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
              <para>Replaces in a string all occurrences of substrings that start with specified marker ("tokens") with specified values.</para>
            </summary>
            <param name="self">Source string where replacements are to be made.</param>
            <param name="marker">Marker string that is used to locate substrings that should be replaced inside a <paramref name="value"/> string.</param>
            <param name="tokens">Dictionary of replacement key-value pairs with key representing substring to be replaced (without a marker), and value representing a new string.</param>
            <returns>New string with all replacements made.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/>, <paramref name="tokens"/> or <paramref name="marker"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="marker"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToRegex(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Text.RegularExpressions.Regex"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToSingle(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Single"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Single"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is empty string.</exception>
            <seealso cref="M:System.Single.Parse(System.String)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToSingle(System.String,System.Single@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToSingle(System.String,System.Single@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Single"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Single"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Single.TryParse(System.String,System.Single@)"/>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToSingle(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToUri(System.String)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Uri"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <returns>The <see cref="T:System.Uri"/> value to which string <paramref name="self"/> was converted.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToUri(System.String,System.Uri@)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.ToUri(System.String,System.Uri@)">
            <summary>
              <para>Converts specified string into <see cref="T:System.Uri"/> value.</para>
            </summary>
            <param name="self">String to be converted.</param>
            <param name="result">The <see cref="T:System.Uri"/> value to which string <paramref name="self"/> was converted.</param>
            <returns><c>true</c> if <paramref name="self"/> was successfully converted, <c>false</c> otherwise.</returns>
            <seealso cref="M:Catharsis.Commons.StringExtensions.ToUri(System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.StringExtensions.Whitespace(System.String)">
            <summary>
              <para>Determines whether the specified string is either <see cref="F:System.String.Empty"/> or consists only of white-space characters.</para>
            </summary>
            <param name="self">A string reference.</param>
            <returns><c>true</c> if the <paramref name="self"/> parameter is either empty string or consists of white-space characters; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="T:Catharsis.Commons.NumericExtensions">
            <summary>
              <para>Set of extension methods for primitive numeric types.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Int16)">
            <summary>
              <para>Returns the absolute value of 16-bit signed integer.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Int32)">
            <summary>
              <para>Returns the absolute value of 32-bit signed integer.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Int64)">
            <summary>
              <para>Returns the absolute value of 64-bit signed integer.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Single)">
            <summary>
              <para>Returns the absolute value of single-precision floating-point number.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Double)">
            <summary>
              <para>Returns the absolute value of double-precision floating-point number.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Abs(System.Decimal)">
            <summary>
              <para>Returns the absolute value of a <see cref="T:System.Decimal"/> number.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Absolute value of <paramref name="self"/>.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Ceil(System.Double)">
            <summary>
              <para>Returns the smallest integer greater than or equal to the specified number.</para>
            </summary>
            <param name="self">A double-precision floating-point number.</param>
            <returns>The smallest integral value that is greater than or equal to <paramref name="self"/>.</returns>
            <seealso cref="M:System.Math.Ceiling(System.Double)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Days(System.Byte)">
            <summary>
              <para>Creates a time span object, representing a given number of days.</para>
            </summary>
            <param name="self">Number of days.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Days(System.Int16)">
            <summary>
              <para>Creates a time span object, representing a given number of days.</para>
            </summary>
            <param name="self">Number of days.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Days(System.Int32)">
            <summary>
              <para>Creates a time span object, representing a given number of days.</para>
            </summary>
            <param name="self">Number of days.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.DownTo(System.Byte,System.Byte,System.Action)">
            <summary>
              <para>Performs a decremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Upper bound value to start iteration from. It must be greater or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Lower bound value to end iteration on. It must be lower or equal to the value of <paramref name="self"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int32,System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int16,System.Int16,System.Action)">
            <summary>
              <para>Performs a decremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Upper bound value to start iteration from. It must be greater or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Lower bound value to end iteration on. It must be lower or equal to the value of <paramref name="self"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int32,System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int32,System.Int32,System.Action)">
            <summary>
              <para>Performs a decremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Upper bound value to start iteration from. It must be greater or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Lower bound value to end iteration on. It must be lower or equal to the value of <paramref name="self"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int64,System.Int64,System.Action)">
            <summary>
              <para>Performs a decremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Upper bound value to start iteration from. It must be greater or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Lower bound value to end iteration on. It must be lower or equal to the value of <paramref name="self"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.DownTo(System.Int32,System.Int32,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Even(System.Byte)">
            <summary>
              <para>Determines whether specified numeric value is an even number.</para>
            </summary>
            <param name="self">Numeric value.</param>
            <returns><c>true</c> if <paramref name="self"/> is even number, <c>false</c> if not.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Even(System.Int16)">
            <summary>
              <para>Determines whether specified numeric value is an even number.</para>
            </summary>
            <param name="self">Numeric value.</param>
            <returns><c>true</c> if <paramref name="self"/> is even number, <c>false</c> if not.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Even(System.Int32)">
            <summary>
              <para>Determines whether specified numeric value is an even number.</para>
            </summary>
            <param name="self">Numeric value.</param>
            <returns><c>true</c> if <paramref name="self"/> is even number, <c>false</c> if not.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Even(System.Int64)">
            <summary>
              <para>Determines whether specified numeric value is an even number.</para>
            </summary>
            <param name="self">Numeric value.</param>
            <returns><c>true</c> if <paramref name="self"/> is even number, <c>false</c> if not.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Floor(System.Double)">
            <summary>
              <para>Returns the largest integer less than or equal to the specified number.</para>
            </summary>
            <param name="self">A double-precision floating-point number.</param>
            <returns>The largest integer less than or equal to <paramref name="self"/>.</returns>
            <seealso cref="M:System.Math.Floor(System.Double)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Hours(System.Byte)">
            <summary>
              <para>Creates a time span object, representing a given number of hours.</para>
            </summary>
            <param name="self">Number of hours.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Hours(System.Int16)">
            <summary>
              <para>Creates a time span object, representing a given number of hours.</para>
            </summary>
            <param name="self">Number of hours.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Hours(System.Int32)">
            <summary>
              <para>Creates a time span object, representing a given number of hours.</para>
            </summary>
            <param name="self">Number of hours.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Milliseconds(System.Byte)">
            <summary>
              <para>Creates a time span object, representing a given number of milliseconds.</para>
            </summary>
            <param name="self">Number of milliseconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Milliseconds(System.Int16)">
            <summary>
              <para>Creates a time span object, representing a given number of milliseconds.</para>
            </summary>
            <param name="self">Number of milliseconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Milliseconds(System.Int32)">
            <summary>
              <para>Creates a time span object, representing a given number of milliseconds.</para>
            </summary>
            <param name="self">Number of milliseconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Minutes(System.Byte)">
            <summary>
              <para>Creates a time span object, representing a given number of minutes.</para>
            </summary>
            <param name="self">Number of minutes.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Minutes(System.Int16)">
            <summary>
              <para>Creates a time span object, representing a given number of minutes.</para>
            </summary>
            <param name="self">Number of minutes.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Minutes(System.Int32)">
            <summary>
              <para>Creates a time span object, representing a given number of minutes.</para>
            </summary>
            <param name="self">Number of minutes.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Power(System.Double,System.Double)">
            <summary>
              <para>Returns a specified number raised to the specified power.</para>
            </summary>
            <param name="self">A double-precision floating-point number to be raised to a power.</param>
            <param name="power">A double-precision floating-point number that specifies a power.</param>
            <returns>The number <paramref name="self"/> raised to the power <paramref name="power"/>.</returns>
            <seealso cref="M:System.Math.Pow(System.Double,System.Double)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Round(System.Double)">
            <summary>
              <para>Rounds a double-precision floating-point value to the nearest integral value.</para>
            </summary>
            <param name="self">A double-precision floating-point number to be rounded.</param>
            <returns>The integer nearest <paramref name="self"/>.</returns>
            <seealso cref="M:System.Math.Round(System.Double)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Round(System.Decimal)">
            <summary>
              <para>Rounds a decimal value to the nearest integral value.</para>
            </summary>
            <param name="self">A decimal number to be rounded.</param>
            <returns>The integer nearest <paramref name="self"/>.</returns>
            <seealso cref="M:System.Math.Round(System.Decimal)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Seconds(System.Byte)">
            <summary>
              <para>Creates a time span object, representing a given number of seconds.</para>
            </summary>
            <param name="self">Number of seconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Seconds(System.Int16)">
            <summary>
              <para>Creates a time span object, representing a given number of seconds.</para>
            </summary>
            <param name="self">Number of seconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Seconds(System.Int32)">
            <summary>
              <para>Creates a time span object, representing a given number of seconds.</para>
            </summary>
            <param name="self">Number of seconds.</param>
            <returns>Time span instance.</returns>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Sqrt(System.Double)">
            <summary>
              <para>Returns the square root of a specified number.</para>
            </summary>
            <param name="self">Source number.</param>
            <returns>Square root of <paramref name="self"/>.</returns>
            <seealso cref="M:System.Math.Sqrt(System.Double)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Times(System.Byte,System.Action)">
            <summary>
              <para>Calls given delegate specified number of times.</para>
            </summary>
            <param name="self">Number of times to call a delegate.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Times(System.Int16,System.Action)">
            <summary>
              <para>Calls given delegate specified number of times.</para>
            </summary>
            <param name="self">Number of times to call a delegate.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Times(System.Int32,System.Action)">
            <summary>
              <para>Calls given delegate specified number of times.</para>
            </summary>
            <param name="self">Number of times to call a delegate.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.Times(System.Int64,System.Action)">
            <summary>
              <para>Calls given delegate specified number of times.</para>
            </summary>
            <param name="self">Number of times to call a delegate.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.Times(System.Int32,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.UpTo(System.Byte,System.Byte,System.Action)">
            <summary>
              <para>Performs an incremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Lower bound value to start iteration from. It must be lower or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Upper bound value to end iteration on. It must be greater or equal to the value of <paramref name="from"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int32,System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int16,System.Int16,System.Action)">
            <summary>
              <para>Performs an incremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Lower bound value to start iteration from. It must be lower or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Upper bound value to end iteration on. It must be greater or equal to the value of <paramref name="from"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int32,System.Int32,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int32,System.Int32,System.Action)">
            <summary>
              <para>Performs an incremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Lower bound value to start iteration from. It must be lower or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Upper bound value to end iteration on. It must be greater or equal to the value of <paramref name="from"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int64,System.Int64,System.Action)"/>
        </member>
        <member name="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int64,System.Int64,System.Action)">
            <summary>
              <para>Performs an incremental iteration in given range with a step of 1 and calls a delegate on each iteration.</para>
            </summary>
            <param name="self">Lower bound value to start iteration from. It must be lower or equal to the value of <paramref name="to"/>.</param>
            <param name="to">Upper bound value to end iteration on. It must be greater or equal to the value of <paramref name="from"/>.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Byte,System.Byte,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int16,System.Int16,System.Action)"/>
            <seealso cref="M:Catharsis.Commons.NumericExtensions.UpTo(System.Int32,System.Int32,System.Action)"/>
        </member>
        <member name="T:Catharsis.Commons.EqualsAndHashCodeAttribute">
            <summary>
              <para>This attribute is used to specify the list of properties of the target class or structure to be used in equality comparison and hash codes calculation.</para>
              <para>If present, it's used automatically by the following extension methods:</para>
              <list type="bullet">
                <item><description><see cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.String[])"/></description></item>
                <item><description><see cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/></description></item>
                <item><description><see cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Collections.Generic.IEnumerable{System.String})"/></description></item>
                <item><description><see cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/></description></item>
              </list>
            </summary>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
            <seealso cref="M:System.Object.GetHashCode"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.String[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Collections.Generic.IEnumerable{System.String})"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
        </member>
        <member name="M:Catharsis.Commons.EqualsAndHashCodeAttribute.#ctor(System.String)">
            <summary>
              <para>Creates new instance of attribute.</para>
            </summary>
            <param name="properties">Comma-separated list of properties to be used in equality comparison and hash codes calculation.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="properties"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="properties"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="P:Catharsis.Commons.EqualsAndHashCodeAttribute.Properties">
            <summary>
              <para>Set of properties in target <see cref="T:System.Type"/>, used by attribute.</para>
            </summary>
        </member>
        <member name="T:Catharsis.Commons.PropertyInfoExtensions">
            <summary>
              <para>Set of extensions methods for class <see cref="T:System.Reflection.PropertyInfo"/>.</para>
            </summary>
            <seealso cref="T:System.Reflection.PropertyInfo"/>
        </member>
        <member name="M:Catharsis.Commons.PropertyInfoExtensions.IsPublic(System.Reflection.PropertyInfo)">
            <summary>
              <para>Determines whether specified class property has a <c>public</c> access level.</para>
            </summary>
            <param name="self">Class property to inspect.</param>
            <returns><c>true</c> if <paramref name="self"/> is having a <c>public</c> access level, <c>false</c> otherwise (protected/private).</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.XDocumentExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Xml.Linq.XDocument"/>.</para>
            </summary>
            <seealso cref="T:System.Xml.Linq.XDocument"/>
        </member>
        <member name="M:Catharsis.Commons.XDocumentExtensions.Dictionary(System.Xml.Linq.XDocument)">
            <summary>
              <para>Translates specified <see cref="T:System.Xml.Linq.XDocument"/> into a dictionary.</para>
              <para>Attributes in XML document are translated to string keys and values, nodes become dictionaries with string keys themselves.</para>
            </summary>
            <param name="self"><see cref="T:System.Xml.Linq.XDocument"/>, whose structure is to be converted to <see cref="!:IDictionary&lt;string, object&gt;"/> instance.</param>
            <returns>Dictionary that follows the structure of <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.XElementExtensions.Dictionary(System.Xml.Linq.XElement)"/>
        </member>
        <member name="T:Catharsis.Commons.SpecificationBase`1">
            <summary>
              <para>Basic implementation of <see cref="T:Catharsis.Commons.ISpecification`1"/> interface.</para>
            </summary>
            <typeparam name="T">Type of specification's elements.</typeparam>
        </member>
        <member name="T:Catharsis.Commons.ISpecification`1">
            <summary>
              <para>Represents a business rule or requirement that must be fulfilled by objects of specified type.</para>
            </summary>
            <typeparam name="T">Type of specification's elements.</typeparam>
        </member>
        <member name="M:Catharsis.Commons.ISpecification`1.Filter(System.Linq.IQueryable{`0})">
            <summary>
              <para>Performs a filtering operation by taking <see cref="T:System.Linq.IQueryable`1"/> object and returning a new object of the same type, often with a less number of elements.</para>
              <para>Concrete filtering logic, applied to target <see cref="T:System.Linq.IQueryable`1"/> source depends upon the implementation.</para>
            </summary>
            <param name="queryable"><see cref="T:System.Linq.IQueryable`1"/> source to be filtered.</param>
            <returns>Altered/filtered version of <paramref name="queryable"/> source.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queryable"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="P:Catharsis.Commons.ISpecification`1.Expression">
            <summary>
              <para>Lamba expression that represents a business rule in a predicate form.</para>
              <para>Object of type <typeparam name="T"/>, for which that predicate evaluates to <c>true</c>, is considered to conform with current specification.</para>
            </summary>
            <typeparam name="T">Type of elements, supported by the predicate rule.</typeparam>
        </member>
        <member name="M:Catharsis.Commons.SpecificationBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
              <para>Creates new instance of specification.</para>
            </summary>
            <param name="expression">Lambda expression predicate rule. If not specified, default predicate expression is used, that always evaluates to <c>true</c>.</param>
        </member>
        <member name="M:Catharsis.Commons.SpecificationBase`1.Filter(System.Linq.IQueryable{`0})">
            <summary>
              <para>Performs a filtering operation by taking <see cref="T:System.Linq.IQueryable`1"/> object and returning a new object of the same type, often with a less number of elements.</para>
              <para>Concrete filtering logic, applied to target <see cref="T:System.Linq.IQueryable`1"/> source depends upon the implementation.</para>
            </summary>
            <param name="queryable"><see cref="T:System.Linq.IQueryable`1"/> source to be filtered.</param>
            <returns>Altered/filtered version of <paramref name="queryable"/> source.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="queryable"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="P:Catharsis.Commons.SpecificationBase`1.Expression">
            <summary>
              <para>Lamba expression that represents a business rule in a predicate form.</para>
              <para>Object of type <typeparam name="T"/>, for which that predicate evaluates to <c>true</c>, is considered to conform with current specification.</para>
            </summary>
        </member>
        <member name="T:Catharsis.Commons.TextReaderExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.IO.TextReader"/>.</para>
            </summary>
            <seealso cref="T:System.IO.TextReader"/>
        </member>
        <member name="M:Catharsis.Commons.TextReaderExtensions.Lines(System.IO.TextReader,System.Boolean)">
            <summary>
              <para>Reads text using specified <see cref="T:System.IO.TextReader"/> and returns it as a list of strings, using default system-dependent string separator.</para>
            </summary>
            <param name="self"><see cref="T:System.IO.TextReader"/> which is used to read text from its underlying source.</param>
            <returns>List of strings which have been read from a <paramref name="self"/>.</returns>
            <param name="close">Whether to close a <paramref name="self"/> after all texts have been read.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.TextReaderExtensions.Text(System.IO.TextReader,System.Boolean)">
            <summary>
              <para>Reads text using specified <see cref="T:System.IO.TextReader"/> and returns it as a string.</para>
            </summary>
            <param name="self"><see cref="T:System.IO.TextReader"/> which is used to read text from its underlying source.</param>
            <returns>Text content which have been read from a <paramref name="self"/>.</returns>
            <param name="close">Whether to close a <paramref name="self"/> after all text have been read.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.TextReaderExtensions.XDocument(System.IO.TextReader,System.Boolean)">
            <summary>
              <para>Deserialize XML contents from a <see cref="T:System.IO.TextReader"/> into <see cref="M:Catharsis.Commons.TextReaderExtensions.XDocument(System.IO.TextReader,System.Boolean)"/> object.</para>
            </summary>
            <param name="self"><see cref="T:System.IO.TextReader"/> which is used to read XML text content from its underlying source.</param>
            <param name="close">Whether to close <paramref name="self"/> after all XML content have been read and deserialized.</param>
            <returns><see cref="M:Catharsis.Commons.TextReaderExtensions.XDocument(System.IO.TextReader,System.Boolean)"/> instance, constructed from XML contents which have been read through a <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.TextReaderExtensions.XDocument(System.IO.TextReader,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.TextReaderExtensions.XmlReader(System.IO.TextReader,System.Boolean)">
            <summary>
              <para>Creates <see cref="M:Catharsis.Commons.TextReaderExtensions.XmlReader(System.IO.TextReader,System.Boolean)"/> that wraps specified <see cref="T:System.IO.TextReader"/> instance.</para>
            </summary>
            <param name="self"><see cref="T:System.IO.TextReader"/> that wraps XML data source.</param>
            <param name="close">Whether to automatically close <paramref name="self"/> when wrapping <see cref="M:Catharsis.Commons.TextReaderExtensions.XmlReader(System.IO.TextReader,System.Boolean)"/> will be closed.</param>
            <returns><see cref="M:Catharsis.Commons.TextReaderExtensions.XmlReader(System.IO.TextReader,System.Boolean)"/> instance that wraps a text <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.TextReaderExtensions.XmlReader(System.IO.TextReader,System.Boolean)"/>
        </member>
        <member name="T:Catharsis.Commons.IQueryableExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:System.Linq.IQueryable`1"/>.</para>
            </summary>
            <seealso cref="T:System.Linq.IQueryable`1"/>
        </member>
        <member name="M:Catharsis.Commons.IQueryableExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
              <para>Performs "pagination" of specified <see cref="T:System.Linq.IQueryable`1"/> source, returning a fragment ("page") of its contents.</para>
            </summary>
            <typeparam name="T">Type of elements in <see cref="T:System.Linq.IQueryable`1"/> source.</typeparam>
            <param name="self">Source from which a fragment is to be taken.</param>
            <param name="page">Number of fragment/slice that is to be taken. Numbering starts from 1.</param>
            <param name="pageSize">Size of fragment ("page"), number of entities to be taken. Must be a positive number.</param>
            <returns>Source that represent a fragment of the original <paramref name="self"/> and consists of no more than <paramref name="pageSize"/> elements.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.IQueryableExtensions.Random``1(System.Linq.IQueryable{``0})">
            <summary>
              <para>Picks up random element from <see cref="T:System.Linq.IQueryable`1"/> source and returns it.</para>
            </summary>
            <typeparam name="T">Type of elements in <see cref="T:System.Linq.IQueryable`1"/> source.</typeparam>
            <param name="self">Source from which random element is to be taken.</param>
            <returns>Random member of <paramref name="self"/> source. If <paramref name="self"/> contains no elements, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.Assertion">
            <summary>
              <para>Collection of methods to perform assertions on objects.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Default``1(``0,System.String)">
            <summary>
              <para>Asserts that specified value is a default value for its <see cref="T:System.Type"/>.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise methods returns normally.</para>
            </summary>
            <typeparam name="T">Type of subject value.</typeparam>
            <param name="self">Value to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotDefault``1(``0,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Empty(System.Collections.IEnumerable,System.String)">
            <summary>
              <para>Asserts that specified sequence is empty (does not contain any elements).</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Sequence to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Empty``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>
            <seealso cref="M:Catharsis.Commons.Assertion.NotEmpty(System.Collections.IEnumerable,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Empty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Asserts that specified sequence is empty (does not contain any elements).</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <typeparam name="T">Type of elements in sequence.</typeparam>
            <param name="self">Sequence to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Empty(System.Collections.IEnumerable,System.String)"/>
            <seealso cref="M:Catharsis.Commons.Assertion.NotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Equal(System.Object,System.Object,System.String)">
            <summary>
              <para>Asserts that two objects are equal, according to the result of <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method's call.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">First object to be compared.</param>
            <param name="other">Second object to be compared.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotEqual(System.Object,System.Object,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.False(System.Boolean,System.String)">
            <summary>
              <para>Asserts that specified logical expression evaluates to false.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Logical expression to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.True(System.Boolean,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotDefault``1(``0,System.String)">
            <summary>
              <para>Asserts that specified value is not a default value for its <see cref="T:System.Type"/>.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise methods returns normally.</para>
            </summary>
            <typeparam name="T">Type of subject value.</typeparam>
            <param name="self">Value to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Default``1(``0,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
              <para>Asserts that specified sequence is not empty (contains at least one element).</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Sequence to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>
            <seealso cref="M:Catharsis.Commons.Assertion.Empty(System.Collections.IEnumerable,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Asserts that specified sequence is not empty (contains at least one element).</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <typeparam name="T">Type of elements in sequence.</typeparam>
            <param name="self">Sequence to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotEmpty(System.Collections.IEnumerable,System.String)"/>
            <seealso cref="M:Catharsis.Commons.Assertion.Empty``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotEqual(System.Object,System.Object,System.String)">
            <summary>
              <para>Asserts that two objects are not equal, according to the result of <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method's call.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">First object to be compared.</param>
            <param name="other">Second object to be compared.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Equal(System.Object,System.Object,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotNull(System.Object,System.String)">
            <summary>
              <para>Asserts that specified value is not <c>null</c>.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Object to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Null(System.Object,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.NotWhitespace(System.String,System.String)">
            <summary>
              <para>Asserts that specified string is not a <c>null</c> reference, <see cref="F:System.String.Empty"/> or contains only space characters.</para>
            </summary>
            <param name="self">String to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when assertion fails (<paramref name="self"/> is a <c>null</c> reference).</exception>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails (<paramref name="self"/> is either <see cref="F:System.String.Empty"/> or contains only space characters).</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.Whitespace(System.String,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Null(System.Object,System.String)">
            <summary>
              <para>Asserts that specified value is a <c>null</c> reference.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Object to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotNull(System.Object,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.True(System.Boolean,System.String)">
            <summary>
              <para>Asserts that specified logical expression evaluates to true.</para>
              <para>If assertion fails, <see cref="T:System.ArgumentException"/> will be thrown, otherwise method returns normally.</para>
            </summary>
            <param name="self">Logical expression to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.False(System.Boolean,System.String)"/>
        </member>
        <member name="M:Catharsis.Commons.Assertion.Whitespace(System.String,System.String)">
            <summary>
              <para>Asserts that specified string is either a <c>null</c> reference, <see cref="F:System.String.Empty"/> or contains only space characters.</para>
            </summary>
            <param name="self">String to be evaluated.</param>
            <param name="message">Error message to be used if assertion fails.</param>
            <exception cref="T:System.ArgumentException">Thrown when assertion fails.</exception>
            <seealso cref="M:Catharsis.Commons.Assertion.NotWhitespace(System.String,System.String)"/>
        </member>
        <member name="T:Catharsis.Commons.IEnumerableSetExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</para>
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableSetExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Converts sequence of elements into a set collection type.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence of elements.</param>
            <returns>Set collection which contains elements from <paramref name="self"/> sequence without dublicates. Order of elements in a set is not guaranteed to be the same as returned by <paramref name="self"/>'s enumerator.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.ISpecificationExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:Catharsis.Commons.ISpecification`1"/>.</para>
            </summary>
            <seealso cref="T:Catharsis.Commons.ISpecification`1"/>
        </member>
        <member name="M:Catharsis.Commons.ISpecificationExtensions.Conforms``1(Catharsis.Commons.ISpecification{``0},``0)">
            <summary>
              <para>Determines whether given object conforms with a specification (specification's rule predicate evaluates to <c>true</c>).</para>
            </summary>
            <typeparam name="T">Type of specification's elements.</typeparam>
            <param name="self">Current instance of specification.</param>
            <param name="subject">Target object that is being evaluated for conforming with <paramref name="self"/>.</param>
            <returns><c>true</c> if <paramref name="subject"/> conforms with <paramref name="self"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="subject"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.AssemblyExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Reflection.Assembly"/>.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.AssemblyExtensions.Resource(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
              <para>Returns contents of specified embedded text resource of the assembly.</para>
              <para>Returns a <c>null</c> reference if resource with specified name cannot be found.</para>
            </summary>
            <param name="self">Assembly with resource.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <param name="encoding">Optional encoding to be used when reading resource's data. If not specified, <see cref="P:System.Text.Encoding.UTF8"/> encoding is used.</param>
            <returns>Text data of assembly manifest's resource.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:Catharsis.Commons.DelegateExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Delegate"/>.</para>
            </summary>
            <seealso cref="T:System.Delegate"/>
        </member>
        <member name="M:Catharsis.Commons.DelegateExtensions.And(System.Delegate,System.Delegate)">
            <summary>
              <para>Concatenates the invocation list of a current delegate and a second one.</para>
            </summary>
            <param name="self">Current delegate to combine with the second.</param>
            <param name="other">Second delegate to compare with the current.</param>
            <returns>New delegate which a combined invocation list from <paramref name="self"/> and <paramref name="other"/> delegates.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="other"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)"/>
        </member>
        <member name="M:Catharsis.Commons.DelegateExtensions.Not(System.Delegate,System.Delegate)">
            <summary>
              <para>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</para>
            </summary>
            <param name="self">The delegate from which to remove the invocation list of <paramref name="other"/>.</param>
            <param name="other">The delegate that supplies the invocation list to remove from the invocation list of <paramref name="self"/>.</param>
            <returns>A new delegate with an invocation list formed by taking the invocation list of <paramref name="self"/> and removing the last occurrence of the invocation list of <paramref name="other"/>, if the invocation list of <paramref name="other"/> is found within the invocation list of <paramref name="self"/>. Returns <paramref name="self"/> if <paramref name="other"/> is <c>null</c> or if the invocation list of <paramref name="other"/> is not found within the invocation list of <paramref name="self"/>. Returns a <c>null</c> reference if the invocation list of <paramref name="other"/> is equal to the invocation list of <paramref name="self"/> or if <paramref name="self"/> is a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)"/>
        </member>
        <member name="T:Catharsis.Commons.TextWriterExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.IO.TextWriter"/>.</para>
            </summary>
            <seealso cref="T:System.IO.TextWriter"/>
        </member>
        <member name="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)">
            <summary>
              <para>Creates <see cref="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)"/> that wraps specified <see cref="T:System.IO.TextWriter"/> instance.</para>
            </summary>
            <param name="self"><see cref="T:System.IO.TextWriter"/> that wraps XML data destination.</param>
            <param name="close">Whether to automatically close <paramref name="self"/> when wrapping <see cref="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)"/> will be closed.</param>
            <param name="encoding">Encoding to be used by <see cref="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)"/>. If not specified, default encoding will be used.</param>
            <returns><see cref="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)"/> instance that wraps a text <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.TextWriterExtensions.XmlWriter(System.IO.TextWriter,System.Boolean,System.Text.Encoding)"/>
        </member>
        <member name="T:Catharsis.Commons.SymmetricAlgorithmExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.</para>
            </summary>
            <seealso cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>
        </member>
        <member name="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
              <para>Decrypts encrypted binary data, using specified symmetric algorithm.</para>
            </summary>
            <param name="self">Symmetric algorithm which have been used for encryption previously and should be used for decryption now.</param>
            <param name="source">Binary data to be decrypted.</param>
            <returns>Decrypted binary data.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="source"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Boolean)">
            <summary>
              <para>Decrypts encrypted contents of a <see cref="T:System.IO.Stream"/>, using specified symmetric algorithm.</para>
            </summary>
            <param name="self">Symmetric algorithm which have been used for encryption previously and should be used for decryption now.</param>
            <param name="source">Stream of binary data to be decrypted.</param>
            <param name="close">Whether to close <paramref name="source"/> stream when all data from it has been read and decrypted.</param>
            <returns>Decrypted binary data.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="source"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])"/>
        </member>
        <member name="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
              <para>Encrypts binary data, using specified symmetric algorithm.</para>
            </summary>
            <param name="self">Symmetric algorithm to be used for encryption.</param>
            <param name="source">Binary data to be encrypted.</param>
            <returns>Encrypted binary data.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="source"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.Boolean)">
            <summary>
              <para>Encrypts binary data from a <see cref="T:System.IO.Stream"/>, using specified symmetric algorithm.</para>
            </summary>
            <param name="self">Symmetric algorithm to be used for encryption.</param>
            <param name="source">Stream of binary data to be encrypted.</param>
            <param name="close">Whether to close <paramref name="source"/> stream when all data from it has been read and encrypted.</param>
            <returns>Encrypted binary data.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="source"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])"/>
        </member>
        <member name="T:Catharsis.Commons.QueryableTransformersFactory">
            <summary>
              <para>Manages cached <see cref="T:Catharsis.Commons.IQueryableTransformer`2"/> implementations.</para>
            </summary>
        </member>
        <member name="M:Catharsis.Commons.QueryableTransformersFactory.Register``2(Catharsis.Commons.IQueryableTransformer{``0,``1})">
            <summary>
              <para>Registers and adds to cache new <see cref="T:Catharsis.Commons.IQueryableTransformer`2"/> implementation.</para>
            </summary>
            <typeparam name="FROM">Source type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
            <typeparam name="TO">Destination type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
            <param name="transformer">Transformer instance to be registered.</param>
            <returns>Back reference to the current transformers factory.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="transformer"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.QueryableTransformersFactory.Get``2">
            <summary>
              <para>Retrieves previously registered <see cref="T:Catharsis.Commons.IQueryableTransformer`2"/> instance.</para>
            </summary>
            <typeparam name="FROM">Source type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
            <typeparam name="TO">Destination type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
            <returns>Registered transformer instance or a <c>null</c> reference in case it could not be found.</returns>
        </member>
        <member name="M:Catharsis.Commons.QueryableTransformersFactory.Clear">
            <summary>
              <para>Removes all registered and cached <see cref="T:Catharsis.Commons.IQueryableTransformer`2"/> instances.</para>
            </summary>
            <returns>Back reference to the current transformers factory.</returns>
        </member>
        <member name="P:Catharsis.Commons.QueryableTransformersFactory.Transformers">
            <summary>
              <para>Instance of transformers factory.</para>
            </summary>
        </member>
        <member name="T:Catharsis.Commons.FileInfoExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.IO.FileInfo"/>.</para>
            </summary>
            <seealso cref="T:System.IO.FileInfo"/>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.Byte[])">
            <summary>
              <para>Appends array of bytes to the end of specified file.</para>
            </summary>
            <param name="self">File to append data to.</param>
            <param name="bytes">Sequence of bytes to be added to the end of file.</param>
            <returns>Back reference to the current file.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="bytes"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.String,System.Text.Encoding)"/>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.IO.Stream)"/>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
              <para>Appends text content to the end of specified file.</para>
            </summary>
            <param name="self">File to append text to.</param>
            <param name="text">Text data to be added to the end of file.</param>
            <param name="encoding">Text encoding to be used for transformation between text and bytes. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> is used.</param>
            <returns>Back reference to the current file.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="text"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.Byte[])"/>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.IO.Stream)"/>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.IO.Stream)">
            <summary>
              <para>Appends content of a stream to the end of specified file.</para>
            </summary>
            <param name="self">File to append stream data to.</param>
            <param name="stream">Stream to use as a source of data.</param>
            <returns>Back reference to the current file.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="stream"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.Byte[])"/>
            <seealso cref="M:Catharsis.Commons.FileInfoExtensions.Append(System.IO.FileInfo,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Bytes(System.IO.FileInfo)">
            <summary>
             <para>Reads entire contents of file and returns it as a byte array.</para>
            </summary>
            <param name="self">File to read data from.</param>
            <returns>Byte content of specified <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Clear(System.IO.FileInfo)">
            <summary>
              <para>Erases all content from a file, making it a zero-length one.</para>
            </summary>
            <param name="self">File to truncate.</param>
            <returns>Back reference to the current file.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Lines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
              <para>Reads text content of a file and returns it as a list of strings, using default system-dependent string separator.</para>
            </summary>
            <param name="self">File to read text from.</param>
            <param name="encoding">Text encoding to be used for transformation between text and bytes. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> is used.</param>
            <returns>List of strings which have been read from a <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.FileInfoExtensions.Text(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
              <para>Reads text content of a file and returns it as a string.</para>
            </summary>
            <param name="self">File to read text from.</param>
            <param name="encoding">Text encoding to be used for transformation between text and bytes. If not specified, default <see cref="P:System.Text.Encoding.UTF8"/> is used.</param>
            <returns>Text contents of a <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.Convert">
            <summary>
              <para>Represents a converter between different source and destination <see cref="T:System.Type"/>s.</para>
            </summary>
        </member>
        <member name="P:Catharsis.Commons.Convert.To">
            <summary>
              <para>Current converter instance.</para>
            </summary>
        </member>
        <member name="T:Catharsis.Commons.XmlReaderExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Xml.XmlReader"/>.</para>
            </summary>
            <seealso cref="T:System.Xml.XmlReader"/>
        </member>
        <member name="M:Catharsis.Commons.XmlReaderExtensions.Dictionary(System.Xml.XmlReader,System.Boolean)">
            <summary>
              <para>Translates XML content from specified <see cref="T:System.Xml.XmlReader"/> into a dictionary.</para>
              <para>Attributes in XML document are translated to string keys and values, nodes become dictionaries with string keys themselves.</para>
            </summary>
            <param name="self"><see cref="T:System.Xml.XmlReader"/> used for reading of XML data which is to be converted to <see cref="!:IDictionary&lt;string, object&gt;"/> instance.</param>
            <param name="close">Whether to automatically close a <paramref name="self"/> after conversion of XML data is finished.</param>
            <returns>Dictionary that follows the structure of XML data from <see cref="T:System.Xml.XmlReader"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.XmlReaderExtensions.Read``2(``0,System.Func{``0,``1})">
            <summary>
              <para>Calls specified delegate action in a context of <see cref="T:System.Xml.XmlReader"/>, automatically closing it after delegate method completes, and returns the result of delegate method's call.</para>
            </summary>
            <typeparam name="READER">Type of <see cref="T:System.Xml.XmlReader"/> implementation.</typeparam>
            <typeparam name="RESULT">Type of result, returned by <paramref name="action"/> delegate.</typeparam>
            <param name="self"><see cref="T:System.Xml.XmlReader"/> object, in context of which <paramref name="action"/> method is to be called. This reader will be closed automatically when <paramref name="action"/>'s call finishes, no matter whether it was successful or not.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <returns>Value, returned by calling of <paramref name="action"/> delegate's method in a context of <paramref name="self"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="action"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.TimeSpanExtensions">
            <summary>
              <para>Set of extension methods for structure <see cref="T:System.TimeSpan"/>.</para>
            </summary>
            <seealso cref="T:System.TimeSpan"/>
        </member>
        <member name="M:Catharsis.Commons.TimeSpanExtensions.BeforeNow(System.TimeSpan)">
            <summary>
              <para>Returns a new date/time instance, representing a point in time lesser than the current by specified <see cref="T:System.TimeSpan"/>.</para>
            </summary>
            <param name="self">Time span to substract from current date/time.</param>
            <returns>Current date/time, decremented by the <paramref name="self"/>, expressed as a local time.</returns>
        </member>
        <member name="M:Catharsis.Commons.TimeSpanExtensions.BeforeNowUtc(System.TimeSpan)">
            <summary>
              <para>Returns a new date/time instance, representing a point in time lesser than the current by specified <see cref="T:System.TimeSpan"/>.</para>
            </summary>
            <param name="self">Time span to substract from current date/time.</param>
            <returns>Current date/time, decremented by the <paramref name="self"/>, expressed as Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="M:Catharsis.Commons.TimeSpanExtensions.FromNow(System.TimeSpan)">
            <summary>
              <para>Returns a new date/time instance, representing a point in time greater than the current by specified <see cref="T:System.TimeSpan"/>.</para>
            </summary>
            <param name="self">Time span to add to current date/time.</param>
            <returns>Current date/time, incremented by the <paramref name="self"/>, expressed as a local time.</returns>
        </member>
        <member name="M:Catharsis.Commons.TimeSpanExtensions.FromNowUtc(System.TimeSpan)">
            <summary>
              <para>Returns a new date/time instance, representing a point in time greater than the current by specified <see cref="T:System.TimeSpan"/>.</para>
            </summary>
            <param name="self">Time span to add to current date/time.</param>
            <returns>Current date/time, incremented by the <paramref name="self"/>, expressed as Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="T:Catharsis.Commons.RandomExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Random"/>.</para>
            </summary>
            <seealso cref="T:System.Random"/>
        </member>
        <member name="M:Catharsis.Commons.RandomExtensions.Bytes(System.Random,System.Int32)">
            <summary>
              <para>Generates specified number of random bytes.</para>
            </summary>
            <param name="self">Randomization object that is being extended.</param>
            <param name="count">Number of bytes to generate.</param>
            <returns>Array of randomly generated bytes. Length of array is equal to <paramref name="count"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <seealso cref="M:System.Random.NextBytes(System.Byte[])"/>
        </member>
        <member name="T:Catharsis.Commons.ICollectionExtensions">
            <summary>
              <para>Set of extension methods for interface <see cref="T:System.Collections.Generic.ICollection`1"/>.</para>
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1"/>
        </member>
        <member name="M:Catharsis.Commons.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Sequentially adds all elements, returned by the enumerator, to the specified collection.</para>
            </summary>
            <typeparam name="T">Type of collection's elements.</typeparam>
            <param name="self">Collection to which elements are added.</param>
            <param name="other">Elements enumerator that provide elements for addition to the collection <paramref name="self"/>.</param>
            <returns>Reference to the supplied collection <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="other"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:Catharsis.Commons.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Sequentially removes all elements, returned by the enumerator, from the specified collection, if it has it.</para>
            </summary>
            <typeparam name="T">Type of collection's elements.</typeparam>
            <param name="self">Collection from which elements are removed.</param>
            <param name="other">Elements enumerator that provider elements for removal from the collection <see cref="!:self"/>.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="other"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
            <seealso cref="M:Catharsis.Commons.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="T:Catharsis.Commons.StringHttpExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.String"/>.</para>
            </summary>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Catharsis.Commons.StringHttpExtensions.UrlDecode(System.String)">
            <summary>
              <para>Decodes URL-encoded string.</para>
            </summary>
            <param name="self">String to decode.</param>
            <returns>Decoded string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.StringHttpExtensions.UrlEncode(System.String)">
            <summary>
              <para>URL-encodes string.</para>
            </summary>
            <param name="self">String to encode.</param>
            <returns>Encoded string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="T:Catharsis.Commons.DateTimeExtensions">
            <summary>
              <para>Set of extension methods for structure <see cref="T:System.DateTime"/>.</para>
            </summary>
            <seealso cref="T:System.DateTime"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.DownTo(System.DateTime,System.DateTime,System.Action)">
            <summary>
              <para>For a given range of dates decrements starting date by one day down to final date, calling specified action with each iteration.</para>
            </summary>
            <param name="self">Starting date to decrement.</param>
            <param name="to">Final date to decrement to.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <returns>Back reference to <paramref name="self"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the end of current day.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the end of day of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.StartOfDay(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the end of current month.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the end of month of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.StartOfDay(System.DateTime)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.StartOfMonth(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.EndOfYear(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the end of current year.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the end of year of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.StartOfYear(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Friday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Friday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Friday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.ISO8601(System.DateTime)">
            <summary>
              <para>Formats given date/time instance according to ISO 8601 specification and returns formatted date as a string.</para>
            </summary>
            <param name="self">Date/time object instance.</param>
            <returns>Formatted date/time value as a string.</returns>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.IsSameDate(System.DateTime,System.DateTime)">
            <summary>
              <para>Determines whether two <see cref="T:System.DateTime"/> object instances represent the same date (have same year/month/day values).</para>
            </summary>
            <param name="self">Curent date to compare with the second.</param>
            <param name="other">Second date to compare with the current.</param>
            <returns><c>true</c> if both <paramref name="self"/> and <paramref name="other"/> have equals date component.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.IsSameTime(System.DateTime,System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.IsSameTime(System.DateTime,System.DateTime)">
            <summary>
              <para>Determines whether two <see cref="T:System.DateTime"/> object instances represent the same time (have same hour/minute/second values).</para>
            </summary>
            <param name="self">Current date to compare with the second.</param>
            <param name="other">Second date to compare with the current.</param>
            <returns><c>true</c> if both <paramref name="self"/> and <paramref name="other"/> have equal time component.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.IsSameDate(System.DateTime,System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Monday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Monday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Monday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.NextDay(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the next day from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the day after the day of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddDays(System.Double)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.PreviousDay(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.NextMonth(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the next month from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the month after the month of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddMonths(System.Int32)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.PreviousMonth(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.NextYear(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the next year from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the year after the year of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddYears(System.Int32)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.PreviousYear(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.PreviousDay(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the previous day from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the day before the day of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddDays(System.Double)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.NextDay(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.PreviousMonth(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the previous month from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the month before the month of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddMonths(System.Int32)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.NextMonth(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.PreviousYear(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the previous year from the current date.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the year before the year of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:System.DateTime.AddYears(System.Int32)"/>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.NextYear(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.RFC1121(System.DateTime)">
            <summary>
              <para>Formats given date/time instance according to RFC 1123 specification and returns formatted date as a string.</para>
            </summary>
            <param name="self">Date/time object instance.</param>
            <returns>Formatted date/time value as a string.</returns>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Saturday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Saturday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Saturday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.StartOfDay(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the start of day.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represent the start of day of the specified <paramref name="self"/>.</returns>
            <remarks>Date component (year, month, day) remains the same, while time component (hour/minute/second) is changed to represent the beginning of the day (hour : 0, minute : 0, second : 0).</remarks>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.EndOfDay(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.StartOfMonth(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the start of month.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the start of month of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.EndOfMonth(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.StartOfYear(System.DateTime)">
            <summary>
              <para>For a given date/time instance returns a new date/time, representing the start of year.</para>
            </summary>
            <param name="self">Original date/time object instance.</param>
            <returns>New date/time object instance that represents the start of year of the specified <paramref name="self"/>.</returns>
            <seealso cref="M:Catharsis.Commons.DateTimeExtensions.EndOfYear(System.DateTime)"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Sunday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Sunday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Sunday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Thursday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Thursday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Thursday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Tuesday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Tuesday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Tuesday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.UpTo(System.DateTime,System.DateTime,System.Action)">
            <summary>
              <para>For a given range of dates increments starting date by one day up to final date, calling specified action with each iteration.</para>
            </summary>
            <param name="self">Starting date to increment.</param>
            <param name="to">Final date to increment to.</param>
            <param name="action">Delegate to call on each step of iteration.</param>
            <returns>Back reference to <paramref name="self"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.DateTimeExtensions.Wednesday(System.DateTime)">
            <summary>
              <para>Determines whether specified <see cref="T:System.DateTime"/> object represents a Wednesday day of week.</para>
            </summary>
            <param name="self">Date instance.</param>
            <returns><c>true</c> of <paramref name="self"/>'s day of week is Wednesday, false if not.</returns>
            <seealso cref="P:System.DateTime.DayOfWeek"/>
        </member>
        <member name="T:Catharsis.Commons.IQueryableTransformer`2">
            <summary>
              <para>Represents a transformer between <see cref="T:System.Linq.IQueryable`1"/> instances of different underlying <see cref="T:System.Type"/>s.</para>
            </summary>
            <typeparam name="FROM">Source type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
            <typeparam name="TO">Destination type of <see cref="T:System.Linq.IQueryable`1"/> object.</typeparam>
        </member>
        <member name="M:Catharsis.Commons.IQueryableTransformer`2.Transform(System.Linq.IQueryable{`0})">
            <summary>
              <para>Transforms one <see cref="T:System.Linq.IQueryable`1"/> source to another.</para>
            </summary>
            <param name="from"><see cref="T:System.Linq.IQueryable`1"/> source that is to be transformed.</param>
            <returns>Transformed version of <paramref name="from"/> source.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="from"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.TypeExtensions">
            <summary>
              <para>Set of extensions methods for class <see cref="T:System.Type"/>.</para>
            </summary>
            <seealso cref="T:System.Type"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.AnyEvent(System.Type,System.String)">
            <summary>
              <para>Searches for a named event, declared within a specified <see cref="T:System.Type"/>.</para>
              <para>Returns <see cref="T:System.Reflection.EventInfo"/> object, representing either instance or static event with either private or public access level.</para>
            </summary>
            <param name="self">Type whose event is to be located.</param>
            <param name="name">Unique name of event.</param>
            <returns><see cref="T:System.Reflection.EventInfo"/> object representing the event of <paramref name="self"/>. If event cannot be found, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.AnyField(System.Type,System.String)">
            <summary>
              <para>Searches for a named field, declared within a specified <see cref="T:System.Type"/>.</para>
              <para>Returns <see cref="T:System.Reflection.FieldInfo"/> object, representing either instance or static field with either private or public access level.</para>
            </summary>
            <param name="self">Type whose field is to be located.</param>
            <param name="name">Unique name of field.</param>
            <returns><see cref="T:System.Reflection.FieldInfo"/> object representing the field of <paramref name="self"/>. If field cannot be found, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.AnyMethod(System.Type,System.String)">
            <summary>
              <para>Searches for a named method, declared within a specified <see cref="T:System.Type"/>.</para>
              <para>Returns <see cref="T:System.Reflection.MethodInfo"/> object, representing either instance or static method with either private or public access level.</para>
            </summary>
            <param name="self">Type whose method is to be located.</param>
            <param name="name">Unique name of method.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> object representing the method of <paramref name="self"/>. If method cannot be found, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.AnyProperty(System.Type,System.String)">
            <summary>
              <para>Searches for a named property, declared within a specified <see cref="T:System.Type"/>.</para>
              <para>Returns <see cref="T:System.Reflection.PropertyInfo"/> object, representing either instance or static property with either private or public access level.</para>
            </summary>
            <param name="self">Type whose property is to be located.</param>
            <param name="name">Unique name of property.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> object representing the property of <paramref name="self"/>. If property cannot be found, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.DefaultConstructor(System.Type)">
            <summary>
              <para>Searches for a default no-arguments constructor, declared within a specified <see cref="T:System.Type"/>.</para>
              <para>Returns <see cref="T:System.Reflection.ConstructorInfo"/> object, representing no-arguments constructor.</para>
            </summary>
            <param name="self">Type whose constructor is to be located.</param>
            <returns><see cref="T:System.Reflection.ConstructorInfo"/> object representing no-arguments constructor of <paramref name="self"/>. If constructor cannot be found, returns <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.HasField(System.Type,System.String)">
            <summary>
              <para>Determines whether there is a named field, declared within a specified <see cref="T:System.Type"/>.</para>
            </summary>
            <param name="self">Type whose field is to be located.</param>
            <param name="name">Unique name of field.</param>
            <returns><c>true</c> if either instance or static field with either private or public access level is declared for <paramref name="self"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.HasMethod(System.Type,System.String)">
            <summary>
              <para>Determines whether there is a named method, declared within a specified <see cref="T:System.Type"/>.</para>
            </summary>
            <param name="self">Type whose method is to be located.</param>
            <param name="name">Unique name of method.</param>
            <returns><c>true</c> if either instance or static method with either private or public access level is declared for <paramref name="self"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.HasProperty(System.Type,System.String)">
            <summary>
              <para>Determines whether there is a named property, declared within a specified <see cref="T:System.Type"/>.</para>
            </summary>
            <param name="self">Type whose property is to be located.</param>
            <param name="name">Unique name of property.</param>
            <returns><c>true</c> if either instance or static property with either private or public access level is declared for <paramref name="self"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.Implements(System.Type,System.Type)">
            <summary>
              <para>Determines whether a <see cref="T:System.Type"/> implements specified interface.</para>
            </summary>
            <param name="self">The type to evaluate.</param>
            <param name="interfaceType">Interface that must be implemented by <paramref name="self"/>.</param>
            <returns><c>true</c> if <paramref name="self"/> implements interface of type <paramref name="interfaceType"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="interfaceType"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="interfaceType"/> does not represent interface.</exception>
            <seealso cref="M:System.Type.GetInterface(System.String,System.Boolean)"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.Implements``1(System.Type)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.Implements``1(System.Type)">
            <summary>
              <para>Determines whether a <see cref="T:System.Type"/> implements specified interface.</para>
            </summary>
            <typeparam name="T">Interface that must be implemented by <paramref name="self"/>.</typeparam>
            <param name="self">The type to evaluate.</param>
            <returns><c>true</c> if <paramref name="self"/> implements interface of type <typeparamref name="T"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <typeparamref name="T"/> type does not represent interface.</exception>
            <seealso cref="M:System.Type.GetInterface(System.String,System.Boolean)"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.Implements(System.Type,System.Type)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.Inherits(System.Type)">
            <summary>
              <para>Returns enumerator to iterate over the set of specified <see cref="T:System.Type"/>'s base types and implemented interfaces.</para>
            </summary>
            <param name="self">Type, whose ancestors (base types up the inheritance hierarchy) and implemented interfaces are returned.</param>
            <returns>Enumerator to iterate through <paramref name="self"/>'s base types and interfaces, which it implements.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <remarks>The order of the base types and interfaces returned is undetermined.</remarks>
            <seealso cref="P:System.Type.BaseType"/>
            <seealso cref="M:System.Type.GetInterfaces"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
              <para>Determines whether target <see cref="T:System.Type"/> is anonymous one.</para>
            </summary>
            <param name="self">Subject type.</param>
            <returns><c>true</c> if <paramref name="self"/> represents an anonymous <see cref="T:System.Type"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.IsAssignableTo``1(System.Type)">
            <summary>
              <para>Determines whether the <paramref name="self"/> can be assigned to type <typeparamref name="T"/>, or, in other words, whether the instance of type <typeparamref name="T"/> are assignable from <paramref name="self"/>.</para>
            </summary>
            <typeparam name="T">Destination type to which the assignment is made.</typeparam>
            <param name="self">Source type for assignment.</param>
            <returns><c>true</c> if <paramref name="self"/> can be assigned to <typeparamref name="T"/>, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Type.IsAssignableFrom(System.Type)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object[])">
            <summary>
              <para>Dynamically creates new instance of specified <see cref="T:System.Type"/>, passing a set of parameters for its constructor.</para>
            </summary>
            <param name="self">Type whose instance is to be created.</param>
            <param name="args">Optional set of parameters for a constructor of <paramref name="self"/>. Types and number of parameters determine a particular constructor of <paramref name="self"/> to be invoked.</param>
            <returns>Newly created instance of <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:Activator.CreateInstance(Type, BindingFlags, Binder, object[], CultureInfo)"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              <para>Dynamically creates new instance of specified <see cref="T:System.Type"/> by calling its no-arguments constructor, and sets specified properties on a newly created instance.</para>
            </summary>
            <param name="self">Type whose instance is to be created.</param>
            <param name="properties">Collection of properties as a name-value pairs to be set on instance of <paramref name="self"/> after it has been created.</param>
            <returns>Newly created instance of <paramref name="self"/> with set <paramref name="properties"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="properties"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:Activator.CreateInstance(Type, BindingFlags, Binder, object[], CultureInfo)"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object[])"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object)">
            <summary>
              <para>Dynamically creates new instance of specified <see cref="T:System.Type"/> by calling its no-arguments constructor, and sets specified properties on a newly created instance.</para>
            </summary>
            <param name="self">Type whose instance is to be created.</param>
            <param name="properties">Object instance whose public properties values are to be set on a newly created instance of <paramref name="self"/>.</param>
            <returns>Newly created instance of <paramref name="self"/> with set <paramref name="properties"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="properties"/> is a <c>null</c> reference.</exception>
            <seealso cref="!:Activator.CreateInstance(Type, BindingFlags, Binder, object[], CultureInfo)"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Object[])"/>
            <seealso cref="M:Catharsis.Commons.TypeExtensions.NewInstance(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:Catharsis.Commons.TypeExtensions.Properties(System.Type)">
            <summary>
              <para>Returns an array of either instance or static properties with either private or public access level for specified <see cref="T:System.Type"/>.</para>
            </summary>
            <param name="self">Type whose properties are to be returned.</param>
            <returns>Set of instance/static properties, declared within a <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)"/>
        </member>
        <member name="T:Catharsis.Commons.ObjectXmlExtensions">
            <summary>
              <para>Set of extensions methods for class <see cref="T:System.Object"/>.</para>
            </summary>
            <seealso cref="T:System.Object"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Type[])">
            <summary>
              <para>Serializes given object or graph into XML string.</para>
            </summary>
            <typeparam name="T">Type of object to be serialized.</typeparam>
            <param name="self">Object (or objects graph with a root element) to be serialized.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for serialization purposes.</param>
            <returns>Serialized XML contents of <paramref name="self"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.Stream,System.Text.Encoding,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.TextWriter,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Xml.XmlWriter,System.Type[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.Stream,System.Text.Encoding,System.Type[])">
            <summary>
              <para>Serializes given object or graph and writes XML content into specified <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <typeparam name="T">Type of object to be serialized.</typeparam>
            <param name="self">Object (or objects graph with a root element) to be serialized.</param>
            <param name="destination">Destination stream to which serialized XML data is to be written.</param>
            <param name="encoding">Encoding to be used for transformation between bytes and characters when writing to a <paramref name="destination"/> stream. If not specified, default encoding will be used.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for serialization purposes.</param>
            <returns>Back reference to the currently serialized object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="destination"/> or <paramref name="types"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.TextWriter,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Xml.XmlWriter,System.Type[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.TextWriter,System.Type[])">
            <summary>
              <para>Serializes given object or graph and writes XML content using specified <see cref="T:System.IO.TextWriter"/>.</para>
            </summary>
            <typeparam name="T">Type of object to be serialized.</typeparam>
            <param name="self">Object (or objects graph with a root element) to be serialized.</param>
            <param name="writer"><see cref="T:System.IO.TextWriter"/> to be used for writing XML content into its underlying destination.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for serialization purposes.</param>
            <returns>Back reference to the currently serialized object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="writer"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.Stream,System.Text.Encoding,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Xml.XmlWriter,System.Type[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Xml.XmlWriter,System.Type[])">
            <summary>
              <para>Serializes given object or graph and writes XML content using specified <see cref="T:System.Xml.XmlWriter"/>.</para>
            </summary>
            <typeparam name="T">Type of object to be serialized.</typeparam>
            <param name="self">Object (or objects graph with a root element) to be serialized.</param>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> to be used for writing XML content into its underlying destination.</param>
            <param name="types">Additional types to be used by <see cref="T:System.Xml.Serialization.XmlSerializer"/> for serialization purposes.</param>
            <returns>Back reference to the currently serialized object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="writer"/> is a <c>null</c> reference.</exception>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.Stream,System.Text.Encoding,System.Type[])"/>
            <seealso cref="M:Catharsis.Commons.ObjectXmlExtensions.ToXml``1(``0,System.IO.TextWriter,System.Type[])"/>
        </member>
        <member name="T:Catharsis.Commons.MemberInfoExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Reflection.MemberInfo"/>.</para>
            </summary>
            <seealso cref="T:System.Reflection.MemberInfo"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.Attribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
              <para>Returns a custom <see cref="M:Catharsis.Commons.MemberInfoExtensions.Attribute(System.Reflection.MemberInfo,System.Type)"/>, identified by specified <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, that is applied to current <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member.</para>
              <para>Returns a <c>null</c> reference if attribute cannot be found.</para>
            </summary>
            <param name="self">Member of <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, whose attribute is to be returned.</param>
            <param name="attributeType">Type of custom attribute.</param>
            <returns>Instance of attribute, whose type equals to <paramref name="attributeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="attributeType"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.Attribute``1(System.Reflection.MemberInfo)">
            <summary>
              <para>Returns a custom <see cref="M:Catharsis.Commons.MemberInfoExtensions.Attribute(System.Reflection.MemberInfo,System.Type)"/>, identified by specified <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, that is applied to current <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member.</para>
              <para>Returns a <c>null</c> reference if attribute cannot be found.</para>
            </summary>
            <typeparam name="T">Type of custom attribute.</typeparam>
            <param name="self">Member of <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, whose attribute is to be returned.</param>
            <returns>Instance of attribute, whose type equals to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.Attributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
              <para>Returns a collection of all custom attributes, identified by specified <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, which are applied to current <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member.</para>
            </summary>
            <param name="self">Member of <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, whose attributes are to be returned.</param>
            <param name="attributeType">Type of custom attributes.</param>
            <returns>Collection of custom attributes, whose type equals to <paramref name="attributeType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="attributeType"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.Attributes``1(System.Reflection.MemberInfo)">
            <summary>
              <para>Returns a collection of all custom attributes, identified by specified <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, which are applied to current <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member.</para>
            </summary>
            <typeparam name="T">Type of custom attributes.</typeparam>
            <param name="self">Member of <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>, whose attributes are to be returned.</param>
            <returns>Collection of custom attributes, whose type equals to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.IsConstructor(System.Reflection.MemberInfo)">
            <summary>
              <para>Determines whether a targer <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member represents constructor of a class (a <see cref="T:System.Reflection.ConstructorInfo"/> instance).</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class to be evaluated.</param>
            <returns><c>True</c> if specified <paramref name="self"/> represents class constructor, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="F:System.Reflection.MemberTypes.Constructor"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.IsEvent(System.Reflection.MemberInfo)">
            <summary>
              <para>Determines whether a targer <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member represents an event (a <see cref="T:System.Reflection.EventInfo"/> instance).</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class to be evaluated.</param>
            <returns><c>True</c> if specified <paramref name="self"/> represents an event, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="F:System.Reflection.MemberTypes.Event"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.IsField(System.Reflection.MemberInfo)">
            <summary>
              <para>Determines whether a target <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member represents a field (a <see cref="T:System.Reflection.FieldInfo"/> instance).</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class to be evaluated.</param>
            <returns><c>True</c> if specified <paramref name="self"/> represents a field, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="F:System.Reflection.MemberTypes.Field"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.IsMethod(System.Reflection.MemberInfo)">
            <summary>
              <para>Determines whether a target <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member represents a method (a <see cref="T:System.Reflection.MethodInfo"/> instance).</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class to be evaluated.</param>
            <returns><c>True</c> if specified <paramref name="self"/> represents a method, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="F:System.Reflection.MemberTypes.Method"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.IsProperty(System.Reflection.MemberInfo)">
            <summary>
              <para>Determines whether a target <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s member represents a property (a <see cref="T:System.Reflection.PropertyInfo"/> instance).</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class to be evaluated.</param>
            <returns><c>True</c> if specified <paramref name="self"/> represents a property, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="F:System.Reflection.MemberTypes.Property"/>
        </member>
        <member name="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)">
            <summary>
              <para>Returns the <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/> of the target <see cref="M:Catharsis.Commons.MemberInfoExtensions.Type(System.Reflection.MemberInfo)"/>'s property/field member.</para>
            </summary>
            <param name="self">Instance of extended <see cref="T:System.Reflection.MemberInfo"/> class that represents either a field (<see cref="T:System.Reflection.FieldInfo"/> instance) or property (<see cref="T:System.Reflection.PropertyInfo"/> instance).</param>
            <returns>Type of the field/property, represented by specified <paramref name="self"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="P:System.Reflection.MemberInfo.DeclaringType"/>
        </member>
        <member name="T:Catharsis.Commons.IEnumerableExtensions">
            <summary>
              <para>Set of extensions methods for interface <see cref="T:System.Collections.IEnumerable"/>.</para>
            </summary>
            <seealso cref="T:System.Collections.IEnumerable"/>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
              <para>Iterates through a sequence, calling a delegate for each element in it.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence for iteration.</param>
            <param name="action">Delegate to be called for each element in a sequence.</param>
            <returns>Back reference to the current sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="action"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
              <para>Concatenates all elements in a sequence into a string, using specified separator.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence of elements.</param>
            <param name="separator">String to use as a separator between concatenated elements from <paramref name="self"/>.</param>
            <returns>String which is formed from string representation of each element in a <paramref name="self"/> with a <paramref name="separator"/> between them.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="separator"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableExtensions.Paginate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
              <para>Performs "pagination" of a sequence, returning a fragment ("page") of its contents.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence from which a fragment is to be taken.</param>
            <param name="page">Number of fragment/slice that is to be taken. Numbering starts from 1.</param>
            <param name="pageSize">Size of fragment ("page"), number of entities to be taken. Must be a positive number.</param>
            <returns>Source that represent a fragment of the original <paramref name="self"/> sequence and consists of no more than <paramref name="pageSize"/> elements.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Picks up random element from a specified sequence and returns it.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence of elements.</param>
            <returns>Random member of <paramref name="self"/> sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference. If <paramref name="self"/> contains no elements, returns <c>null</c>.</exception>
        </member>
        <member name="M:Catharsis.Commons.IEnumerableExtensions.ToListString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
              <para>Concatenates all elements in a sequence into a string, using comma as a separator and placing the result inside a square brackets.</para>
            </summary>
            <typeparam name="T">Type of elements in a sequence.</typeparam>
            <param name="self">Source sequence of elements.</param>
            <returns>String which is formed from string representation of each element in a <paramref name="self"/> with a comma-character separator between them, all inside square brackets.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.XmlWriterExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:System.Xml.XmlWriter"/>.</para>
            </summary>
            <seealso cref="T:System.Xml.XmlWriter"/>
        </member>
        <member name="M:Catharsis.Commons.XmlWriterExtensions.Write``1(``0,System.Action{``0})">
            <summary>
              <para>Calls specified delegate action in a context of target <see cref="T:System.Xml.XmlWriter"/>, automatically closing it after the call.</para>
            </summary>
            <typeparam name="WRITER">Type of <see cref="T:System.Xml.XmlWriter"/> implementation.</typeparam>
            <param name="self"><see cref="T:System.Xml.XmlWriter"/> instance, in context of which <paramref name="action"/> method is to be called. It will be closed automatically no matter whether <paramref name="action"/> method call succeeds or fails.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <returns>Back reference to the current target <see cref="T:System.Xml.XmlWriter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="action"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="T:Catharsis.Commons.ObjectExtensions">
            <summary>
              <para>Set of extensions methods for class <see cref="T:System.Object"/>.</para>
            </summary>
            <seealso cref="T:System.Object"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.As``1(System.Object)">
            <summary>
              <para>Tries to convert given object to specified type and returns a <c>null</c> reference on failure.</para>
            </summary>
            <typeparam name="T">Type to convert object to.</typeparam>
            <param name="self">Object to convert.</param>
            <returns>Object, converted to the specified type, or a <c>null</c> reference if the conversion cannot be performed.</returns>
            <remarks>If specified object instance is a <c>null</c> reference, a <c>null</c> reference will be returned as a result.</remarks>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.To``1(System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Do``2(``0,System.Func{``0,``1})">
            <summary>
              <para>Calls specified delegate action in a context of target object and returns the result of the call. If target object implements <see cref="T:System.IDisposable"/> interface, invokes delegate method inside a <c>using</c> code block.</para>
            </summary>
            <typeparam name="SUBJECT">Type of target object.</typeparam>
            <typeparam name="OUTPUT">Type of output result for the <paramref name="action"/> delegate.</typeparam>
            <param name="self">Target object, in context of which <paramref name="action"/> method is to be called.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <returns>Value, returned by calling of <paramref name="action"/> delegate's method in a context of <paramref name="self"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Do``1(``0,System.Action{``0})"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Do``1(``0,System.Action{``0})">
            <summary>
              <para>Calls specified delegate action in a context of target object. If target object implements <see cref="T:System.IDisposable"/> interface, invokes delegate method inside a <c>using</c> code block.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="self">Target object, in context of which <paramref name="action"/> method is to be called.</param>
            <param name="action">Delegate that represents a method to be called.</param>
            <returns>Back reference to the current target object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="action"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Do``2(``0,System.Func{``0,``1})"/>
            <remarks>If <paramref name="self"/> does not implement <see cref="T:System.IDisposable"/> interface, this method simply calls <paramref name="action"/>'s method.</remarks>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Dump(System.Object)">
            <summary>
              <para>Returns state (names and values of all public properties) for the given object.</para>
            </summary>
            <param name="self">Target object whose public properties names and values are to be returned.</param>
            <returns>State of <paramref name="self"/> as a string.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <remarks>Property name is separated from property value by a colon, each name-value pairs are separated by comma characters.</remarks>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.String[])">
            <summary>
              <para>Determines whether specified objects are considered equal by comparing values of the given set of properties/fields on each of them.</para>
              <para>The following algorithm is used in equality determination:
                <list type="bullet">
                  <item><description>If both <paramref name="self"/> and <paramref name="other"/> are <c>null</c> references, method returns <c>true</c>.</description></item>
                  <item><description>If one of compared objects is <c>null</c> and another is not, method returns <c>false</c>.</description></item>
                  <item><description>If both objects references are equal (they represent the same object instance), method returns <c>true</c>.</description></item>
                  <item><description>If <paramref name="propertiesOrFields"/> set is either a <c>null</c> reference or contains zero elements, <see cref="T:Catharsis.Commons.EqualsAndHashCodeAttribute"/> attribute is used for equality comparison.</description></item>
                  <item><description>If <typeparamref name="T"/> type does not contain any properties/fields in <paramref name="propertiesOrFields"/> set, <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method is used for equality comparison.</description></item>
                  <item><description>If <typeparamref name="T"/> type contains any of the properties/fields in <paramref name="propertiesOrFields"/> set, their values are used for equality comparison according to <see cref="M:System.Object.Equals(System.Object)"/> method of both <paramref name="self"/> and <paramref name="other"/> instances.</description></item>
                </list>
              </para>
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <param name="self">Current object to compare with the second.</param>
            <param name="other">Second object to compare with the current one.</param>
            <param name="propertiesOrFields">Set of properties/fields whose values are used in equality comparison.</param>
            <returns><c>true</c> if <paramref name="self"/> and <paramref name="other"/> are considered equal, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
              <para>Determines whether specified objects are considered equal by comparing values of the given set of properties, represented as expression trees, on each of them.</para>
              <para>The following algorithm is used in equality determination:
                <list type="bullet">
                  <item><description>If both <paramref name="self"/> and <paramref name="other"/> are <c>null</c> references, method returns <c>true</c>.</description></item>
                  <item><description>If one of compared objects is <c>null</c> and another is not, method returns <c>false</c>.</description></item>
                  <item><description>If both objects references are equal (they represent the same object instance), method returns <c>true</c>.</description></item>
                  <item><description>If <paramref name="properties"/> set is either a <c>null</c> reference or contains zero elements, <see cref="T:Catharsis.Commons.EqualsAndHashCodeAttribute"/> attribute is used for equality comparison.</description></item>
                  <item><description>If <typeparamref name="T"/> type does not contain any properties in <paramref name="properties"/> set, <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method is used for equality comparison.</description></item>
                  <item><description>If <typeparamref name="T"/> type contains any of the properties in <paramref name="properties"/> set, their values are used for equality comparison according to <see cref="M:System.Object.Equals(System.Object)"/> method of both <paramref name="self"/> and <paramref name="other"/> instances.</description></item>
                </list>
              </para>
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <param name="self">Current object to compare with the second.</param>
            <param name="other">Second object to compare with the current one.</param>
            <param name="properties">Set of properties in a form of expression trees, whose values are used in equality comparison.</param>
            <returns><c>true</c> if <paramref name="self"/> and <paramref name="other"/> are considered equal, <c>false</c> otherwise.</returns>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Equality``1(``0,``0,System.String[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Field(System.Object,System.String)">
            <summary>
              <para>Returns the value of object's field with a specified name.</para>
            </summary>
            <param name="self">Object whose field's value is to be returned.</param>
            <param name="name">Name of field of <paramref name="self"/>'s type.</param>
            <returns>Value of <paramref name="self"/>'s field with a given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              <para>Returns a hash value of a given object, using specified set of properties in its calculation.</para>
              <para>The following algorithm is used in hash code calculation:
                <list type="bullet">
                  <item><description>If <paramref name="self"/> is a <c>null</c> reference, methods returns 0.</description></item>
                  <item><description>If <paramref name="properties"/> set is either a <c>null</c> reference or contains zero elements, <see cref="T:Catharsis.Commons.EqualsAndHashCodeAttribute"/> attribute is used for hash code calculation.</description></item>
                  <item><description>If <typeparamref name="T"/> type contains any of the properties in <paramref name="properties"/> set, their values are used for hash code calculation according to <see cref="M:System.Object.GetHashCode"/> method. The sum of <paramref name="self"/>'s properties hash codes is returned in that case.</description></item>
                </list>
              </para>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="self">Target object, whose hash code is to be returned.</param>
            <param name="properties">Collection of properties names, whose values are to be used in hash code's calculation.</param>
            <returns>Hash code for <paramref name="self"/>.</returns>
            <seealso cref="M:System.Object.GetHashCode"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
              <para>Returns a hash value of a given object, using specified set of properties, represented as experssion trees, in its calculation.</para>
              <para>The following algorithm is used in hash code calculation:
                <list type="bullet">
                  <item><description>If <paramref name="self"/> is a <c>null</c> reference, methods returns 0.</description></item>
                  <item><description>If <paramref name="properties"/> set is either a <c>null</c> reference or contains zero elements, <see cref="T:Catharsis.Commons.EqualsAndHashCodeAttribute"/> attribute is used for hash code calculation.</description></item>
                  <item><description>If <typeparamref name="T"/> type contains any of the properties in <paramref name="properties"/> set, their values are used for hash code calculation according to <see cref="M:System.Object.GetHashCode"/> method. The sum of <paramref name="self"/>'s properties hash codes is returned in that case.</description></item>
                </list>
              </para>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="self">Target object, whose hash code is to be returned.</param>
            <param name="properties">Collection of properties in a form of expression trees, whose values are to be used in hash code's calculation.</param>
            <returns>Hash code for <paramref name="self"/>.</returns>
            <seealso cref="M:System.Object.GetHashCode"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.GetHashCode``1(``0,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Is``1(System.Object)">
            <summary>
              <para>Determines if the object is compatible with the given type, as specified by the <c>is</c> operator.</para>
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="self">Object whose type compatibility with <typeparamref name="T"/> is to be determined.</param>
            <returns><c>true</c> if <paramref name="self"/> is type-compatible with <typeparamref name="T"/>, <c>false</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.IsFalse(System.Object)">
            <summary>
              <para>Determines whether the object can be considered as a non-strict <c>false</c> boolean value.</para>
              <para>The following algorithm is used to determine whether an object can be considered non-strictly as a <c>false</c> value:
                <list type="bullet">
                  <item><description>It represents a <c>null</c> reference.</description></item>
                  <item><description>It represents a <c>false</c> value of <c>bool</c> type.</description></item>
                  <item><description>It represents a non-positive value of numeric type.</description></item>
                  <item><description>It represents an <see cref="F:System.String.Empty"/> string.</description></item>
                  <item><description>It represents an empty <see cref="T:System.Collections.IEnumerable"/> collection.</description></item>
                  <item><description>It represents a zero-length <see cref="T:System.IO.FileInfo"/> object.</description></item>
                  <item><description>It represents a regular expression <see cref="T:System.Text.RegularExpressions.Match"/> object without matches.</description></item>
                </list>
              </para>
            </summary>
            <param name="self">Target object for non-strict boolean evaluation.</param>
            <returns><c>true</c> if <paramref name="self"/> can be considered as a non-strict <c>false</c> other, <c>false</c> otherwise.</returns>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.IsTrue(System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.IsTrue(System.Object)">
            <summary>
              <para>Determines whether the object can be considered as a non-strict <c>true</c> boolean value.</para>
              <para>The following algorithm is used to determine whether an object can be considered non-strictly as a <c>true</c> value:
                <list type="bullet">
                  <item><description>It represents a <c>true</c> value of <c>bool</c> type.</description></item>
                  <item><description>It represents a positive value of numeric type.</description></item>
                  <item><description>It represents a non-empty string.</description></item>
                  <item><description>It represents a non-empty <see cref="T:System.Collections.IEnumerable"/> collection.</description></item>
                  <item><description>It represents a <see cref="T:System.IO.FileInfo"/> object which does not represent an empty file.</description></item>
                  <item><description>It represents a <see cref="T:System.IO.Stream"/> object which is not empty.</description></item>
                  <item><description>It represents a regular expression <see cref="T:System.Text.RegularExpressions.Match"/> object with at least one match.</description></item>
                  <item><description>It represents any other type of object which is not a <c>null</c> reference.</description></item>
                </list>
              </para>
            </summary>
            <param name="self">Target object for non-strict boolean evaluation.</param>
            <returns><c>true</c> if <paramref name="self"/> can be considered as a non-strict <c>true</c> other, <c>false</c> otherwise.</returns>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.IsFalse(System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.IsNumeric(System.Object)">
            <summary>
              <para>Determines whether specified object represents a primitive numeric value type.</para>
            </summary>
            <param name="self">Object to be evaluated.</param>
            <returns><c>true</c> if <paramref name="self"/> represents any numeric <see cref="T:System.ValueType"/> (<c>byte</c>, <c>decimal</c>, <c>double</c>, <c>integer</c>, <c>single</c>), <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Type.GetTypeCode(System.Type)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Member``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
              <para>Returns the value of a member on a target object, using expression tree to specify type's member.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <typeparam name="MEMBER">Type of <paramref name="self"/>'s member.</typeparam>
            <param name="self">Target object, whose member's value is to be returned.</param>
            <param name="expression">Lambda expression that represents a member of <typeparamref name="T"/> type, whose value for <paramref name="self"/> instance is to be returned. Generally it should represents either a public property/field or no-arguments method.</param>
            <returns>Value of member of <typeparamref name="T"/> type on a <paramref name="self"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="expression"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Method(System.Object,System.String,System.Object[])">
            <summary>
              <para>Calls/invokes instance method on a target object, passing specified parameters.</para>
            </summary>
            <param name="self">The object on which to invoke the method.</param>
            <param name="name">Name of the method to be invoked.</param>
            <param name="parameters">Optional set of parameters to be passed to invoked method, if it requires some.</param>
            <returns>An object containing the return value of the invoked method.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="!:MethodInfo.Invoke(object, object[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              <para>Sets values of several properties on specified target object.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="self">Target object whose properties are to be changed.</param>
            <param name="properties">Set of properties (as a collection of name - value pairs) to be set on <paramref name="self"/>.</param>
            <returns>Back reference to the current target object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="properties"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property(System.Object,System.String)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property``1(``0,System.String,System.Object)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Object)">
            <summary>
              <para>Sets values of several properties on specified target object.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="self">Target object whose properties are to be changed.</param>
            <param name="properties">Object whose public properties are to be used for setting matched ones on target object.</param>
            <returns>Back reference to the current target object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="properties"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property(System.Object,System.String)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property``1(``0,System.String,System.Object)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.PropertiesMap(System.Object)">
            <summary>
              <para>Creates and returns a dictionary from the values of public properties of target object.</para>
            </summary>
            <param name="self">Target object whose properties values are returned.</param>
            <returns>Dictionary of name - value pairs for public properties of <paramref name="self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Property(System.Object,System.String)">
            <summary>
              <para>Returns the value of given property for specified target object.</para>
            </summary>
            <param name="self">Target object, whose property's value is to be returned.</param>
            <param name="name">Name of property to inspect.</param>
            <returns>Value of property <paramref name="name"/> for <paramref name="self"/> instance, or a <c>null</c> reference in case this property does not exists for <paramref name="self"/>'s type.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="name"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property``1(``0,System.String,System.Object)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.Property``1(``0,System.String,System.Object)">
            <summary>
              <para>Sets the value of given property on specified target object.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="self">Target object whose property is to be changed.</param>
            <param name="property">Name of property to change.</param>
            <param name="value">New value of object's property.</param>
            <returns>Back reference to the current target object.</returns>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="self"/> or <paramref name="property"/> is a <c>null</c> reference.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="property"/> is <see cref="F:System.String.Empty"/> string.</exception>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Property(System.Object,System.String)"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.Properties``1(``0,System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.To``1(System.Object)">
            <summary>
              <para>Tries to convert given object to specified type and throws exception on failure.</para>
            </summary>
            <typeparam name="T">Type to convert object to.</typeparam>
            <param name="self">Object to convert.</param>
            <returns>Object, converted to the specified type.</returns>
            <exception cref="T:System.InvalidCastException">If conversion to specified type cannot be performed.</exception>
            <remarks>If specified object instance is a <c>null</c> reference, a <c>null</c> reference will be returned as a result.</remarks>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.As``1(System.Object)"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.ToString(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              <para>Returns a generic string representation of object, using values of specified properties.</para>
            </summary>
            <param name="self">Object to be converted to string representation.</param>
            <param name="properties">Set of properties, whose values are used for string representation of <paramref name="self"/>.</param>
            <returns>String representation of <paramref name="self"/>. Property name is separated from value by colon character, name-value pairs are separated by comma and immediately following space characters, and all content is placed in square brackets afterwards.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Object.ToString"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.ToString``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.ToString``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
              <para>Returns a generic string representation of object, using values of specified properties in a form of lambda expressions.</para>
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
            <param name="self">Object to be converted to string representation.</param>
            <param name="properties">Set of properties, whose values are used for string representation of <paramref name="self"/>. Each property is represented as a lambda expression.</param>
            <returns>String representation of <paramref name="self"/>. Property name is separated from value by colon character, name-value pairs are separated by comma and immediately following space characters, and all content is placed in square brackets afterwards.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/>If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Object.ToString"/>
            <seealso cref="M:Catharsis.Commons.ObjectExtensions.ToString(System.Object,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Catharsis.Commons.ObjectExtensions.ToStringInvariant(System.Object)">
            <summary>
              <para>Returns a string representation of object, formatted according to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</para>
            </summary>
            <param name="self">Object to be converted to string representation.</param>
            <returns>String representation of <seealso cref="!:self"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Catharsis.Commons.ConvertExtensions">
            <summary>
              <para>Set of extension methods for class <see cref="T:Catharsis.Commons.Convert"/>.</para>
            </summary>
            <seealso cref="T:Catharsis.Commons.Convert"/>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Boolean(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Boolean"/> value, using non-strict approach.</para>
              <para>The following algorithm is used to determine how to perform such conversion:
                <list type="bullet">
                  <item><description>If <paramref name="subject"/> is a <c>null</c> reference, the result is <c>false</c>.</description></item>
                  <item><description>If <paramref name="subject"/> is a <see cref="T:System.Boolean"/> value, it's returned as it is.</description></item>
                  <item><description>If <paramref name="subject"/> is a positive numeric value, the result is <c>true</c>, if it's negative or zero - the result is <c>false</c>.</description></item>
                  <item><description>If <paramref name="subject"/> is a <see cref="T:System.String"/>, <c>true</c> is returned if it contains at least one character, <c>false</c> otherwise.</description></item>
                  <item><description>If <paramref name="subject"/> implements <see cref="T:System.Collections.IEnumerable"/>, <c>true</c> is returned if it contains at least one element, <c>false</c> otherwise.</description></item>
                  <item><description>If <paramref name="subject"/> is a <see cref="T:System.IO.FileInfo"/> value, <c>true</c> is returned if associated file is not empty, <c>false</c> otherwise.</description></item>
                  <item><description>If <paramref name="subject"/> is a <see cref="T:System.IO.Stream"/> value, <c>true</c> is returned if it's not empty, <c>false</c> otherwise.</description></item>
                  <item><description>If <paramref name="subject"/> is a <see cref="T:System.Text.RegularExpressions.Match"/> value, <c>true</c> is returned if it's successful, <c>false</c> otherwise.</description></item>
                </list>
              </para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Byte(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Byte"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Byte"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.DateTime(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.DateTime(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.DateTime(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Decimal(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Decimal"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Decimal"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Double(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Double"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Double"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Guid(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.Guid(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.Guid(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Int16(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Int16"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Int16"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Int32(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Int32"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Int32"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Int64(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.Int64"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.Int64"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.IPAddress(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.IPAddress(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.IPAddress(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Regex(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.Regex(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.Regex(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Single(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.Single(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.Single(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.String(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="T:System.String"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="T:System.String"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
        <member name="M:Catharsis.Commons.ConvertExtensions.Uri(Catharsis.Commons.Convert,System.Object)">
            <summary>
              <para>Converts target object to the <see cref="M:Catharsis.Commons.ConvertExtensions.Uri(Catharsis.Commons.Convert,System.Object)"/> value. Returns <c>null</c> if object is a <c>null</c> reference or conversion is not possible.</para>
            </summary>
            <param name="self">Extended converter instance.</param>
            <param name="subject">Target object for conversion.</param>
            <returns><paramref name="subject"/> instance that was converted to <see cref="M:Catharsis.Commons.ConvertExtensions.Uri(Catharsis.Commons.Convert,System.Object)"/>, or a <c>null</c> reference.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="self"/> is a <c>null</c> reference.</exception>
        </member>
    </members>
</doc>
